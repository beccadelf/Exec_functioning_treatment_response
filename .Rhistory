for (feature in bin_cols) {
features_df_enc[[feature]][is.na(features_df_enc[[feature]])] <- 77777
}
for (feature in non_bin_cols) {
features_df_enc[[feature]][is.na(features_df_enc[[feature]])] <- 99999
}
clin_features <- c("is_woman", "Age", "FAS", "BDI_II", "STAI_T", "BIS_11", "Kirby_k", "CFC_14", "SRHI", "Hauptschule", "Realschule", "Abitur", "anderer_Abschluss")
clin_features_df_enc <- features_df_enc[clin_features]
file_path <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Feature_Label_Dataframes/"
write.csv(features_df_enc, paste0(file_path, "all_features.csv"), row.names = FALSE)
file_path <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Feature_Label_Dataframes/"
write.csv(features_df_enc, paste0(file_path, "all_features.csv"), row.names = FALSE)
write.csv(clin_features_df_enc, paste0(file_path, "clinical_features_only.csv"), row.names = FALSE)
write.csv(labels_df, paste0(file_path, "labels.csv"), row.names = FALSE)
write.csv(outcome_df, paste0(file_path, "outcomes.csv"), row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,rows.print = 6, cols.min.print = 3)
library(dplyr)
library(tidyverse)
library(caret)
basic_path <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/0_Datapreparation/Daten_Gruppenvergleich/With_wrong_responses"
task_data <- read.csv(file.path(basic_path,"Performance_Scores/Task_Performance_Scores.csv")) # contains overall accuracy
data_pat_pre <- read.csv(file.path(basic_path,"Data_Patients_Pre.csv"))
data_pat_pre_clean <- data_pat_pre %>%
filter(!is.na(Response)) # equals to NA at T1_BAT_FAS_score and/or T3_BAT_FAS_score
View(data_pat_pre_clean)
View(data_pat_pre)
features_df <- left_join(x = data_pat_pre_clean,
y = task_data %>% select(Subject, NumbLet_Average_PC,
Stroop_Average_PC,
TwoBack_Average_PC),
by = "Subject")
View(features_df)
View(features_df)
labels_df <- features_df["Response"]
features_df$Response <- NULL
outcome_df <- data.frame(FAS_perc_change = ((features_df$T3_BAT_FAS_score - features_df$T1_BAT_FAS_score) / features_df$T1_BAT_FAS_score) * 100)
# 1. OneHot-Encoding of variable "Abschluss"
features_df$Abschluss <- as.character(features_df$Abschluss)
dummy <- dummyVars(" ~ Abschluss", data = features_df)
trsf <- data.frame(predict(dummy, newdata = features_df, fullRank=TRUE))
features_df_enc <- cbind(features_df, trsf)
# 2. Drop variables "Abschluss", "Subject", "Gruppe", and "T3_BAT_FAS_score"
features_df_enc$Subject <- NULL
features_df_enc$Gruppe <- NULL
features_df_enc$Abschluss <- NULL
features_df_enc$T3_BAT_FAS_score <- NULL
# 3. Rename columns
features_df_enc <- features_df_enc %>%
rename(is_woman = Geschlecht,
Age = Alter,
FAS = T1_BAT_FAS_score,
BDI_II = T1_BAT_BDI_II_score,
STAI_T = T1_BAT_STAI_T_score,
BIS_11 = T1_BAT_BIS_11_score,
Kirby_k = T1_BAT_Kirby_k_score,
CFC_14 = T1_BAT_CFC_14_score,
SRHI = T1_BAT_SRHI_score,
Hauptschule = Abschluss1,
Realschule = Abschluss2,
Abitur = Abschluss3,
anderer_Abschluss = Abschluss4)
View(features_df_enc)
#var_category <- find_bin_cols(features_df_enc_clean)
# TEST
bin_cols <- c("is_woman", "Hauptschule", "Realschule", "Abitur", "anderer_Abschluss")
non_bin_cols <- setdiff(names(features_df_enc), bin_cols)
# TODO: Replace bin_cols with var_category$binary and non_bin_cols with var_category$non_binary as soon as function find_bin_cols works
for (feature in bin_cols) {
features_df_enc[[feature]][is.na(features_df_enc[[feature]])] <- 77777
}
for (feature in non_bin_cols) {
features_df_enc[[feature]][is.na(features_df_enc[[feature]])] <- 99999
}
# Set 1: Clinical features only
clin_features <- c("is_woman", "Age", "FAS", "BDI_II", "STAI_T", "BIS_11", "Kirby_k", "CFC_14", "SRHI", "Hauptschule", "Realschule", "Abitur", "anderer_Abschluss")
clin_features_df_enc <- features_df_enc[clin_features]
# Set 2: All features but without Overall Accuracy
all_features_final <- features_df_enc[, !names(features_df_enc) %in% c("NumbLet_Average_PC", "Stroop_Average_PC", "TwoBack_Average_PC")]
# Set 3: features_df_enc, includes Overall Accuracy
View(all_features_final)
View(features_df_enc)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
windowsFonts(Arial=windowsFont("Arial"))
library(readr)
library(dplyr)
library(ggplot2)
size_text = 10
family = "Arial"
theme_set(theme_classic() + theme(text = element_text(size = size_text, family = family),
axis.title = element_text(size = size_text +2, family = family),
#plot.title = element_text(size = size_text, family = family),
#axis.text = element_text(size = size_text, family = family),
#strip.text =  element_text(size = size_text +4, family = family),
#legend.text =  element_text(size = size_text, family = family)
))
# Get all folders in the results folder (each containing the results of another model)
path_results_folder = "Z:\\Projekte_Meinke\\Old_projects\\Labrotation_Rebecca\\2_Machine_learning\\Results"
results_folders <- list.files(path = path_results_folder, full.names = FALSE)
# For each folder, save the performance_across_iters-file in dictionary
results_dict = list()
for (folder_name in results_folders) {
# Read the file and store it as a dictionary
results_dict[[folder_name]] <- read.delim(file.path(path_results_folder, folder_name,
"performance_across_iters.txt"))
}
# Combine results
combined_results <- bind_rows(results_dict, .id = "FolderName")
# Rename folder-names
combined_results$FolderName <- gsub("random_forest","rf",combined_results$FolderName)
combined_results$FolderName <- gsub("svm","svm_classifier",combined_results$FolderName) # TODO: delete if scrips have been re-run
combined_results$FolderName <- gsub("_no_oversampling","",combined_results$FolderName)
combined_results$FolderName <- gsub("yes_oversampling","oversampled",combined_results$FolderName)
combined_results$FolderName <- gsub("clinical_features_only","clinical_features",combined_results$FolderName)
combined_results$X <- NULL
# Separate into regressor and classifier dataframes
classification_results <- combined_results[grepl("classifier", combined_results$FolderName), ]
regression_results <- combined_results[grepl("regressor", combined_results$FolderName), ]
View(classification_results)
View(regression_results)
create_classification_plot <- function(results_df){
# Set factor levels for FolderName to control the x-axis order
results_df$FolderName <- factor(results_df$FolderName, levels = c(
"clinical_features_rf_classifier","all_features_rf_classifier",
"clinical_features_rf_classifier_oversampled","all_features_rf_classifier_oversampled",
"clinical_features_svm_classifier","all_features_svm_classifier",
"clinical_features_svm_classifier_oversampled","all_features_svm_classifier_oversampled"))
## Define alternating colors for the x-axis levels
#colors <- c("white", "#D3D3D3", "white", "#D3D3D3", "white", "#D3D3D3","white", "#D3D3D3")
# Define colors and their labels for the legend
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureGroup <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Create ggplot
plot <- ggplot(results_df, aes(x=FolderName, y=balanced_accuracy, fill=FeatureGroup)) +
geom_violin(scale = "width") +
geom_jitter(size = 1) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Group") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
classification_results$Model <- ifelse(grepl("rf_classifier", classification_results$FolderName), "Random Forest", ifelse(grepl("svm_classifier", classification_results$FolderName), "SVM", ifelse(grepl("rf_classifier_oversampled", classification_results$FolderName), "Random Forest Oversampled", ifelse(grepl("svm_classifier_oversampled", classification_results$FolderName), "SVM Oversampled"))))
classification_results$Model <- ifelse(grepl("rf_classifier", classification_results$FolderName), "Random Forest", ifelse(grepl("svm_classifier", classification_results$FolderName), "SVM", ifelse(grepl("rf_classifier_oversampled", classification_results$FolderName), "Random Forest (Oversampled)", ifelse(grepl("svm_classifier_oversampled", classification_results$FolderName), "SVM (Oversampled)", NA))))
View(classification_results)
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_classifier_oversampled", results_df$FolderName), "Random Forest (Oversampled)",
ifelse(grepl("_rf_classifier", results_df$FolderName), "Random Forest",
ifelse(grepl("_svm_classifier_oversampled", results_df$FolderName), "SVM (Oversampled)",
ifelse(grepl("_svm_classifier", results_df$FolderName), "SVM", NA))))
# # Set factor levels for FolderName to control the x-axis order
# results_df$FolderName <- factor(results_df$FolderName, levels = c(
#   "clinical_features_rf_classifier","all_features_rf_classifier",
#   "clinical_features_rf_classifier_oversampled","all_features_rf_classifier_oversampled",
#   "clinical_features_svm_classifier","all_features_svm_classifier",
#   "clinical_features_svm_classifier_oversampled","all_features_svm_classifier_oversampled"))
# Define colors and their labels for the legend
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureGroup <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Create ggplot
plot <- ggplot(results_df, aes(x=FolderName, y=balanced_accuracy, fill=FeatureGroup)) +
geom_violin(scale = "width") +
geom_jitter(size = 1) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Group") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(results_df)
}
#classification_plot <- create_classification_plot(results_df = classification_results)
test <- create_classification_plot(results_df = classification_results)
View(test)
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_classifier_oversampled", results_df$FolderName), "Random Forest (Oversampled)",
ifelse(grepl("_rf_classifier", results_df$FolderName), "Random Forest",
ifelse(grepl("_svm_classifier_oversampled", results_df$FolderName), "SVM (Oversampled)",
ifelse(grepl("_svm_classifier", results_df$FolderName), "SVM", NA))))
# # Set factor levels for FolderName to control the x-axis order
# results_df$FolderName <- factor(results_df$FolderName, levels = c(
#   "clinical_features_rf_classifier","all_features_rf_classifier",
#   "clinical_features_rf_classifier_oversampled","all_features_rf_classifier_oversampled",
#   "clinical_features_svm_classifier","all_features_svm_classifier",
#   "clinical_features_svm_classifier_oversampled","all_features_svm_classifier_oversampled"))
# Define colors and their labels for the legend
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureGroup <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Create ggplot
plot <- ggplot(results_df, aes(x=FolderName, y=balanced_accuracy, fill=FeatureGroup)) +
geom_violin(scale = "width") +
geom_jitter(size = 1) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Group") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_classifier_oversampled", results_df$FolderName), "Random Forest (Oversampled)",
ifelse(grepl("_rf_classifier", results_df$FolderName), "Random Forest",
ifelse(grepl("_svm_classifier_oversampled", results_df$FolderName), "SVM (Oversampled)",
ifelse(grepl("_svm_classifier", results_df$FolderName), "SVM", NA))))
# # Set factor levels for FolderName to control the x-axis order
# results_df$FolderName <- factor(results_df$FolderName, levels = c(
#   "clinical_features_rf_classifier","all_features_rf_classifier",
#   "clinical_features_rf_classifier_oversampled","all_features_rf_classifier_oversampled",
#   "clinical_features_svm_classifier","all_features_svm_classifier",
#   "clinical_features_svm_classifier_oversampled","all_features_svm_classifier_oversampled"))
# Define colors and their labels for the legend
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureGroup <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureGroup, y=balanced_accuracy, fill=FeatureGroup)) +
geom_violin(scale = "width") +
geom_jitter(size = 1) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Group") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_classifier_oversampled", results_df$FolderName), "Random Forest (Oversampled)",
ifelse(grepl("_rf_classifier", results_df$FolderName), "Random Forest",
ifelse(grepl("_svm_classifier_oversampled", results_df$FolderName), "SVM (Oversampled)",
ifelse(grepl("_svm_classifier", results_df$FolderName), "SVM", NA))))
# # Set factor levels for FolderName to control the x-axis order
# results_df$FolderName <- factor(results_df$FolderName, levels = c(
#   "clinical_features_rf_classifier","all_features_rf_classifier",
#   "clinical_features_rf_classifier_oversampled","all_features_rf_classifier_oversampled",
#   "clinical_features_svm_classifier","all_features_svm_classifier",
#   "clinical_features_svm_classifier_oversampled","all_features_svm_classifier_oversampled"))
# Define colors and their labels for the legend
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureGroup <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureGroup, y=balanced_accuracy, fill=FeatureGroup)) +
geom_violin(scale = "width") +
geom_jitter(size = 1) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Group") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_classifier_oversampled", results_df$FolderName), "Random Forest (Oversampled)",
ifelse(grepl("_rf_classifier", results_df$FolderName), "Random Forest",
ifelse(grepl("_svm_classifier_oversampled", results_df$FolderName), "SVM (Oversampled)",
ifelse(grepl("_svm_classifier", results_df$FolderName), "SVM", NA))))
# # Set factor levels for FolderName to control the x-axis order
# results_df$FolderName <- factor(results_df$FolderName, levels = c(
#   "clinical_features_rf_classifier","all_features_rf_classifier",
#   "clinical_features_rf_classifier_oversampled","all_features_rf_classifier_oversampled",
#   "clinical_features_svm_classifier","all_features_svm_classifier",
#   "clinical_features_svm_classifier_oversampled","all_features_svm_classifier_oversampled"))
# Define feature sets and specify colors
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Set factor levels for FeatureGroup to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "All Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_classifier_oversampled", results_df$FolderName), "Random Forest (Oversampled)",
ifelse(grepl("_rf_classifier", results_df$FolderName), "Random Forest",
ifelse(grepl("_svm_classifier_oversampled", results_df$FolderName), "SVM (Oversampled)",
ifelse(grepl("_svm_classifier", results_df$FolderName), "SVM", NA))))
# Define feature sets and specify colors
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Set factor levels for FeatureGroup to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "All Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.1, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_classifier_oversampled", results_df$FolderName), "Random Forest (Oversampled)",
ifelse(grepl("_rf_classifier", results_df$FolderName), "Random Forest",
ifelse(grepl("_svm_classifier_oversampled", results_df$FolderName), "SVM (Oversampled)",
ifelse(grepl("_svm_classifier", results_df$FolderName), "SVM", NA))))
# Define feature sets and specify colors
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Set factor levels for FeatureGroup to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "All Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1) + # width = 0.1, height = 0
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_classifier_oversampled", results_df$FolderName), "Random Forest (Oversampled)",
ifelse(grepl("_rf_classifier", results_df$FolderName), "Random Forest",
ifelse(grepl("_svm_classifier_oversampled", results_df$FolderName), "SVM (Oversampled)",
ifelse(grepl("_svm_classifier", results_df$FolderName), "SVM", NA))))
# Define feature sets and specify colors
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Set factor levels for FeatureGroup to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "All Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.3, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_classifier_oversampled", results_df$FolderName), "Random Forest (Oversampled)",
ifelse(grepl("_rf_classifier", results_df$FolderName), "Random Forest",
ifelse(grepl("_svm_classifier_oversampled", results_df$FolderName), "SVM (Oversampled)",
ifelse(grepl("_svm_classifier", results_df$FolderName), "SVM", NA))))
# Define feature sets and specify colors
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Set factor levels for FeatureGroup to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "All Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
View(regression_results)
create_regression_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("_rf_regressor", results_df$FolderName), "Random Forest",
ifelse(grepl("_ridge_regressor", results_df$FolderName), "Ridge", NA))
# Define feature sets and specify colors
colors <- c("Clinical Features" = "white", "All Features" = "#D3D3D3")
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "All Features")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "All Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=MSE, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Mean squared error",  x = "", fill = "Feature Set") +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
regression_plot <- create_regression_plot(results_df = regression_results)
regression_plot

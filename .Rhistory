# Demographics & clinical data
data_all <- haven::read_dta(file.path(basic_path_socdemdata, 'Data_Kevin_28.07.23.dta'))
# Old task data
data_tasks_old <- haven::read_dta(file.path(basic_path_socdemdata, 'TaskBattery.dta')) # needed?
data_all_red <- data_all %>%
rename(Subject = id) %>%
select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score)
# Rename stid for later merge
data_tasks_old <- data_tasks_old %>%
rename(Subject = stid)
merged_data <- AllData_NumbLet %>%
# 1. Merge all task dataframes
left_join(AllData_Stroop, by = "Subject") %>%
left_join(AllData_TwoBack, by = "Subject") %>%
left_join(AllData_SST, by = "Subject") %>%
# 2. Add data_all_red
left_join(data_all_red, by = "Subject")
# Change variable names
merged_data <- merged_data %>%
rename(NumbLet_Average_RT = Overall_RT.x,
NumbLet_Average_PC = Overall_PC.x,
Stroop_Average_RT = Overall_RT.y,
Stroop_Average_PC = Overall_PC.y,
TwoBack_Average_RT = Overall_RT,
TwoBack_Average_PC = Overall_PC)
# Assign post IDs (Gruppe = 2)
merged_data <- merged_data %>%
mutate(Subject = as.numeric(Subject),
Gruppe = ifelse(Subject >= 216601 & Subject <= 216760, 2, Gruppe))
# 1. Remove subjects with missing group information
merged_data_excl1 <- merged_data %>%
filter(!is.na(Gruppe))
excl_group <- anti_join(merged_data, merged_data_excl1, by = "Subject")
# 2. Remove patients with missing FAS_T1 and/or FAS_T3
merged_data_clean <- merged_data_excl1 %>%
filter(Gruppe == 0 | Gruppe == 2 | (Gruppe == 1 & !is.na(T1_BAT_FAS_score) & !is.na(T3_BAT_FAS_score)))
excl_criterion <- anti_join(merged_data_excl1, merged_data_clean, by = "Subject")
## Step 1: Calculate mean and SD for RT and PC across all healthy subjects and all conditions
NumbLet_mean_sd_HC <- merged_data_clean %>%
filter(Gruppe == 0) %>%
select(NumbLet_Average_RT, NumbLet_Average_PC) %>%
summarise(meanRT = mean(NumbLet_Average_RT),
meanPC = mean(NumbLet_Average_PC),
sdRT = sd(NumbLet_Average_RT),
sdPC = sd(NumbLet_Average_PC))
## Step 2: Standardize RT and PC for each condition
merged_data_clean <- merged_data_clean %>%
mutate(Z_Repeat_RT = (Repeat_RT - NumbLet_mean_sd_HC$meanRT) / NumbLet_mean_sd_HC$sdRT,
Z_Switch_RT = (Switch_RT - NumbLet_mean_sd_HC$meanRT) / NumbLet_mean_sd_HC$sdRT,
Z_Repeat_PC = (Repeat_PC - NumbLet_mean_sd_HC$meanPC) / NumbLet_mean_sd_HC$sdPC,
Z_Switch_PC = (Switch_PC - NumbLet_mean_sd_HC$meanPC) / NumbLet_mean_sd_HC$sdPC)
# Step 3: Calculate BIS(Repeat), BIS(Switch) and Difference Score
merged_data_clean <- merged_data_clean %>%
mutate(NumberLetter_BIS_Repeat = Z_Repeat_PC - Z_Repeat_RT,
NumberLetter_BIS_Switch = Z_Switch_PC - Z_Switch_RT) %>%
mutate(NumberLetter_BIS_Diff_Score = NumberLetter_BIS_Switch - NumberLetter_BIS_Repeat)
## Step 1: Calculate mean and SD for RT and PC across all healthy subjects and all conditions
Stroop_mean_sd_HC <- merged_data_clean %>%
filter(Gruppe == 0) %>%
select(Stroop_Average_RT, Stroop_Average_PC) %>%
summarise(meanRT = mean(Stroop_Average_RT),
meanPC = mean(Stroop_Average_PC),
sdRT = sd(Stroop_Average_RT),
sdPC = sd(Stroop_Average_PC))
## Step 2: Standardize RT and PC for each condition
merged_data_clean <- merged_data_clean %>%
mutate(Z_Congruent_RT = (Congruent_RT - Stroop_mean_sd_HC$meanRT) / Stroop_mean_sd_HC$sdRT,
Z_Incongruent_RT = (Incongruent_RT - Stroop_mean_sd_HC$meanRT) / Stroop_mean_sd_HC$sdRT,
Z_Congruent_PC = (Congruent_PC - Stroop_mean_sd_HC$meanPC) / Stroop_mean_sd_HC$sdPC,
Z_Incongruent_PC = (Incongruent_PC - Stroop_mean_sd_HC$meanPC) / Stroop_mean_sd_HC$sdPC)
# Step 3: Calculate BIS(Congruent), BIS(Incongruent) and Difference Score
merged_data_clean <- merged_data_clean %>%
mutate(Stroop_BIS_Congruent = Z_Congruent_PC - Z_Congruent_RT,
Stroop_BIS_Incongruent = Z_Incongruent_PC - Z_Incongruent_RT) %>%
mutate(Stroop_BIS_Diff_Score = Stroop_BIS_Incongruent - Stroop_BIS_Congruent)
## Step 1: Calculate mean and SD for RT and PC across all healthy subjects and all conditions
TwoBack_mean_sd_HC <- merged_data_clean %>%
filter(Gruppe == 0) %>%
select(TwoBack_Average_RT, TwoBack_Average_PC) %>%
summarise(meanRT = mean(TwoBack_Average_RT),
meanPC = mean(TwoBack_Average_PC),
sdRT = sd(TwoBack_Average_RT),
sdPC = sd(TwoBack_Average_PC))
## Step 2: Standardize RT and PC for each condition
merged_data_clean <- merged_data_clean %>%
mutate(Z_Total_RT = (TwoBack_Average_RT - TwoBack_mean_sd_HC$meanRT) / TwoBack_mean_sd_HC$sdRT,
Z_Target_RT = (Target_RT - TwoBack_mean_sd_HC$meanRT) / TwoBack_mean_sd_HC$sdRT,
Z_Foil_RT = (Foil_RT - TwoBack_mean_sd_HC$meanRT) / TwoBack_mean_sd_HC$sdRT,
Z_Total_PC = (TwoBack_Average_PC - TwoBack_mean_sd_HC$meanPC) / TwoBack_mean_sd_HC$sdPC,
Z_Target_PC = (Target_PC - TwoBack_mean_sd_HC$meanPC) / TwoBack_mean_sd_HC$sdPC,
Z_Foil_PC = (Foil_PC - TwoBack_mean_sd_HC$meanPC) / TwoBack_mean_sd_HC$sdPC)
# Calculate BIS(Target), BIS(Total) and BIS_Foil
merged_data_clean <- merged_data_clean %>%
mutate(TwoBack_BIS_Total = Z_Total_PC - Z_Total_RT,
TwoBack_BIS_Target = Z_Target_PC - Z_Target_RT,
TwoBack_BIS_Foil = Z_Foil_PC - Z_Foil_RT)
split_df <- split(merged_data_clean, merged_data_clean$Gruppe)
data_HC <- split_df$"0"
data_Pat_pre <- split_df$"1"
data_Pat_post <- split_df$"2"
View(merged_data_clean)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, rows.print = 6, cols.min.print = 3)
library(haven)
# library(rmatio)
# library(DescTools)
# library(data.table)
library(tidyverse)
# library(caret)
# library(SSRTcalc)
# library(ggplot2)
# Function 4: calculate mean and SD of RT and PC of healthy subjects
# mean_sd_HC <- function(data_HC){
#   # Calculate mean and sd of RT and PC across all healthy subjects and conditions
#   meanRT_HC <- mean(data_HC$Overall_RT)
#   sdRT_HC <- sd(data_HC$Overall_RT)
#   meanPC_HC <- mean(data_HC$Overall_PC)
#   sdPC_HC <- sd(data_HC$Overall_PC)
#   return(meanRT_HC, sdRT_HC, meanPC_HC, sdPC_HC) # TODO: have to be stored in a list
# }
basic_path_taskdata <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Task_Data"
AllData_NumbLet <- read.csv(file.path(basic_path_taskdata,"AllData_NumbLet.csv"))
AllData_Stroop <- read.csv(file.path(basic_path_taskdata,"AllData_Stroop.csv"))
AllData_TwoBack <- read.csv(file.path(basic_path_taskdata,"AllData_TwoBack.csv"))
AllData_SST <- read.csv(file.path(basic_path_taskdata,"AllData_SST.csv"))
basic_path_socdemdata <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/CRC_C5_Hilbert/CRC_C5_Hilbert"
# Demographics & clinical data
data_all <- haven::read_dta(file.path(basic_path_socdemdata, 'Data_Kevin_28.07.23.dta'))
# Old task data
data_tasks_old <- haven::read_dta(file.path(basic_path_socdemdata, 'TaskBattery.dta')) # needed?
data_all_red <- data_all %>%
rename(Subject = id) %>%
select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score)
# Rename stid for later merge
data_tasks_old <- data_tasks_old %>%
rename(Subject = stid)
task_data <- AllData_NumbLet %>%
# 1. Merge all task dataframes
left_join(AllData_Stroop, by = "Subject") %>%
left_join(AllData_TwoBack, by = "Subject") %>%
left_join(AllData_SST, by = "Subject") %>%
# 2. Add data_all_red
left_join(data_all_red, by = "Subject")
# Change variable names
task_data <- task_data %>%
rename(NumbLet_Average_RT = Overall_RT.x,
NumbLet_Average_PC = Overall_PC.x,
Stroop_Average_RT = Overall_RT.y,
Stroop_Average_PC = Overall_PC.y,
TwoBack_Average_RT = Overall_RT,
TwoBack_Average_PC = Overall_PC)
# Assign post IDs (Gruppe = 2)
task_data <- task_data %>%
mutate(Subject = as.numeric(Subject),
Gruppe = ifelse(Subject >= 216601 & Subject <= 216760, 2, Gruppe))
# 1. Remove subjects with missing group information
task_data_excl1 <- task_data %>%
filter(!is.na(Gruppe))
excl_group <- anti_join(task_data, task_data_excl1, by = "Subject")
# 2. Remove patients with missing FAS_T1 and/or FAS_T3
task_data_clean <- task_data_excl1 %>%
filter(Gruppe == 0 | Gruppe == 2 | (Gruppe == 1 & !is.na(T1_BAT_FAS_score) & !is.na(T3_BAT_FAS_score)))
excl_criterion <- anti_join(task_data_excl1, task_data_clean, by = "Subject")
## Step 1: Calculate mean and SD for RT and PC across all healthy subjects and all conditions
NumbLet_mean_sd_HC <- task_data_clean %>%
filter(Gruppe == 0) %>%
select(NumbLet_Average_RT, NumbLet_Average_PC) %>%
summarise(meanRT = mean(NumbLet_Average_RT),
meanPC = mean(NumbLet_Average_PC),
sdRT = sd(NumbLet_Average_RT),
sdPC = sd(NumbLet_Average_PC))
## Step 2: Standardize RT and PC for each condition
task_data_clean <- task_data_clean %>%
mutate(Z_Repeat_RT = (Repeat_RT - NumbLet_mean_sd_HC$meanRT) / NumbLet_mean_sd_HC$sdRT,
Z_Switch_RT = (Switch_RT - NumbLet_mean_sd_HC$meanRT) / NumbLet_mean_sd_HC$sdRT,
Z_Repeat_PC = (Repeat_PC - NumbLet_mean_sd_HC$meanPC) / NumbLet_mean_sd_HC$sdPC,
Z_Switch_PC = (Switch_PC - NumbLet_mean_sd_HC$meanPC) / NumbLet_mean_sd_HC$sdPC)
# Step 3: Calculate BIS(Repeat), BIS(Switch) and Difference Score
task_data_clean <- task_data_clean %>%
mutate(NumberLetter_BIS_Repeat = Z_Repeat_PC - Z_Repeat_RT,
NumberLetter_BIS_Switch = Z_Switch_PC - Z_Switch_RT) %>%
mutate(NumberLetter_BIS_Diff_Score = NumberLetter_BIS_Switch - NumberLetter_BIS_Repeat)
## Step 1: Calculate mean and SD for RT and PC across all healthy subjects and all conditions
Stroop_mean_sd_HC <- task_data_clean %>%
filter(Gruppe == 0) %>%
select(Stroop_Average_RT, Stroop_Average_PC) %>%
summarise(meanRT = mean(Stroop_Average_RT),
meanPC = mean(Stroop_Average_PC),
sdRT = sd(Stroop_Average_RT),
sdPC = sd(Stroop_Average_PC))
## Step 2: Standardize RT and PC for each condition
task_data_clean <- task_data_clean %>%
mutate(Z_Congruent_RT = (Congruent_RT - Stroop_mean_sd_HC$meanRT) / Stroop_mean_sd_HC$sdRT,
Z_Incongruent_RT = (Incongruent_RT - Stroop_mean_sd_HC$meanRT) / Stroop_mean_sd_HC$sdRT,
Z_Congruent_PC = (Congruent_PC - Stroop_mean_sd_HC$meanPC) / Stroop_mean_sd_HC$sdPC,
Z_Incongruent_PC = (Incongruent_PC - Stroop_mean_sd_HC$meanPC) / Stroop_mean_sd_HC$sdPC)
# Step 3: Calculate BIS(Congruent), BIS(Incongruent) and Difference Score
task_data_clean <- task_data_clean %>%
mutate(Stroop_BIS_Congruent = Z_Congruent_PC - Z_Congruent_RT,
Stroop_BIS_Incongruent = Z_Incongruent_PC - Z_Incongruent_RT) %>%
mutate(Stroop_BIS_Diff_Score = Stroop_BIS_Incongruent - Stroop_BIS_Congruent)
## Step 1: Calculate mean and SD for RT and PC across all healthy subjects and all conditions
TwoBack_mean_sd_HC <- task_data_clean %>%
filter(Gruppe == 0) %>%
select(TwoBack_Average_RT, TwoBack_Average_PC) %>%
summarise(meanRT = mean(TwoBack_Average_RT),
meanPC = mean(TwoBack_Average_PC),
sdRT = sd(TwoBack_Average_RT),
sdPC = sd(TwoBack_Average_PC))
## Step 2: Standardize RT and PC for each condition
task_data_clean <- task_data_clean %>%
mutate(Z_Total_RT = (TwoBack_Average_RT - TwoBack_mean_sd_HC$meanRT) / TwoBack_mean_sd_HC$sdRT,
Z_Target_RT = (Target_RT - TwoBack_mean_sd_HC$meanRT) / TwoBack_mean_sd_HC$sdRT,
Z_Foil_RT = (Foil_RT - TwoBack_mean_sd_HC$meanRT) / TwoBack_mean_sd_HC$sdRT,
Z_Total_PC = (TwoBack_Average_PC - TwoBack_mean_sd_HC$meanPC) / TwoBack_mean_sd_HC$sdPC,
Z_Target_PC = (Target_PC - TwoBack_mean_sd_HC$meanPC) / TwoBack_mean_sd_HC$sdPC,
Z_Foil_PC = (Foil_PC - TwoBack_mean_sd_HC$meanPC) / TwoBack_mean_sd_HC$sdPC)
# Calculate BIS(Target), BIS(Total) and BIS_Foil
task_data_clean <- task_data_clean %>%
mutate(TwoBack_BIS_Total = Z_Total_PC - Z_Total_RT,
TwoBack_BIS_Target = Z_Target_PC - Z_Target_RT,
TwoBack_BIS_Foil = Z_Foil_PC - Z_Foil_RT)
# Reduce task data
task_data_clean_imp <- task_data_clean %>%
select(Subject, Gruppe, NumberLetter_BIS_Repeat, NumberLetter_BIS_Switch, NumberLetter_BIS_Diff_Score, Stroop_BIS_Congruent, Stroop_BIS_Incongruent, Stroop_BIS_Diff_Score, TwoBack_BIS_Foil, TwoBack_BIS_Target, TwoBack_BIS_Total, SSRT, T1_BAT_FAS_score, T3_BAT_FAS_score)
# Add sociodem. & clinical data
all_data <- left_join(x = task_data_clean_imp,
y = data_all %>% select(Subject,
Geschlecht,
Alter,
Abschluss,
T1_BAT_FAS_score,
T3_BAT_FAS_score,
T1_BAT_BDI_II_score,
T1_BAT_STAI_T_score,
T1_BAT_BIS_11_score,
T1_BAT_Kirby_k_score,
T1_BAT_CFC_14_score,
T1_BAT_SRHI_score),
by = "Subject")
View(task_data_clean_imp)
data_all <- data_all %>%
rename(Subject = id)
all_data <- left_join(x = task_data_clean_imp,
y = data_all %>% select(Subject,
Geschlecht,
Alter,
Abschluss,
T1_BAT_FAS_score,
T3_BAT_FAS_score,
T1_BAT_BDI_II_score,
T1_BAT_STAI_T_score,
T1_BAT_BIS_11_score,
T1_BAT_Kirby_k_score,
T1_BAT_CFC_14_score,
T1_BAT_SRHI_score),
by = "Subject")
View(all_data)
identical(all_data$T1_BAT_FAS_score.x, all_data$T1_BAT_FAS_score.y)
identical(all_data$T3_BAT_FAS_score.x, all_data$T3_BAT_FAS_score.y)
all_data <- all_data %>%
mutate(Response = ifelse((T1_BAT_FAS_score.x - T3_BAT_FAS_score.x) >= 0.5 * T1_BAT_FAS_score.x, 1, 0))
View(all_data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, rows.print = 6, cols.min.print = 3)
library(haven)
# library(rmatio)
# library(DescTools)
# library(data.table)
library(tidyverse)
# library(caret)
# library(SSRTcalc)
# library(ggplot2)
# Function 4: calculate mean and SD of RT and PC of healthy subjects
# mean_sd_HC <- function(data_HC){
#   # Calculate mean and sd of RT and PC across all healthy subjects and conditions
#   meanRT_HC <- mean(data_HC$Overall_RT)
#   sdRT_HC <- sd(data_HC$Overall_RT)
#   meanPC_HC <- mean(data_HC$Overall_PC)
#   sdPC_HC <- sd(data_HC$Overall_PC)
#   return(meanRT_HC, sdRT_HC, meanPC_HC, sdPC_HC) # TODO: have to be stored in a list
# }
basic_path_taskdata <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Task_Data"
AllData_NumbLet <- read.csv(file.path(basic_path_taskdata,"AllData_NumbLet.csv"))
basic_path_taskdata <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Task_Data"
AllData_NumbLet <- read.csv(file.path(basic_path_taskdata,"AllData_NumbLet.csv"))
AllData_Stroop <- read.csv(file.path(basic_path_taskdata,"AllData_Stroop.csv"))
AllData_TwoBack <- read.csv(file.path(basic_path_taskdata,"AllData_TwoBack.csv"))
AllData_SST <- read.csv(file.path(basic_path_taskdata,"AllData_SST.csv"))
basic_path_socdemdata <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/CRC_C5_Hilbert/CRC_C5_Hilbert"
# Demographics & clinical data
data_all <- haven::read_dta(file.path(basic_path_socdemdata, 'Data_Kevin_28.07.23.dta'))
# Old task data
data_tasks_old <- haven::read_dta(file.path(basic_path_socdemdata, 'TaskBattery.dta')) # needed?
data_all <- data_all %>%
rename(Subject = id)
# Rename stid for later merge
data_tasks_old <- data_tasks_old %>%
rename(Subject = stid)
task_data <- AllData_NumbLet %>%
# 1. Merge all task dataframes
left_join(AllData_Stroop, by = "Subject") %>%
left_join(AllData_TwoBack, by = "Subject") %>%
left_join(AllData_SST, by = "Subject") %>%
# 2. Add group and response data
left_join(data_all %>% select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score),
by = "Subject")
# Change variable names
task_data <- task_data %>%
rename(NumbLet_Average_RT = Overall_RT.x,
NumbLet_Average_PC = Overall_PC.x,
Stroop_Average_RT = Overall_RT.y,
Stroop_Average_PC = Overall_PC.y,
TwoBack_Average_RT = Overall_RT,
TwoBack_Average_PC = Overall_PC)
# Assign post IDs (Gruppe = 2)
task_data <- task_data %>%
mutate(Subject = as.numeric(Subject),
Gruppe = ifelse(Subject >= 216601 & Subject <= 216760, 2, Gruppe))
task_data <- AllData_NumbLet %>%
# 1. Merge all task dataframes
left_join(AllData_Stroop, by = "Subject") %>%
left_join(AllData_TwoBack, by = "Subject") %>%
left_join(AllData_SST, by = "Subject") %>%
# 2. Add group and response data
left_join(data_all %>% select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score),
by = "Subject")
View(task_data)
task_data <- AllData_NumbLet %>%
# 1. Merge all task dataframes
left_join(AllData_Stroop, by = "Subject") %>%
left_join(AllData_TwoBack, by = "Subject") %>%
left_join(AllData_SST, by = "Subject") %>%
# 2. Add group and response data
left_join(data_all %>% select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score),
by = "Subject")
# Change variable names
task_data <- task_data %>%
rename(NumbLet_Average_RT = Overall_RT.x,
NumbLet_Average_PC = Overall_PC.x,
Stroop_Average_RT = Overall_RT.y,
Stroop_Average_PC = Overall_PC.y,
TwoBack_Average_RT = Overall_RT,
TwoBack_Average_PC = Overall_PC)
# Assign post IDs (Gruppe = 2)
task_data <- task_data %>%
mutate(Subject = as.numeric(Subject),
Gruppe = ifelse(Subject >= 216601 & Subject <= 216760, 2, Gruppe))
# 1. Remove subjects with missing group information
task_data_excl1 <- task_data %>%
filter(!is.na(Gruppe))
excl_group <- anti_join(task_data, task_data_excl1, by = "Subject")
# 2. Remove patients with missing FAS_T1 and/or FAS_T3
task_data_clean <- task_data_excl1 %>%
filter(Gruppe == 0 | Gruppe == 2 | (Gruppe == 1 & !is.na(T1_BAT_FAS_score) & !is.na(T3_BAT_FAS_score)))
excl_criterion <- anti_join(task_data_excl1, task_data_clean, by = "Subject")
## Step 1: Calculate mean and SD for RT and PC across all healthy subjects and all conditions
NumbLet_mean_sd_HC <- task_data_clean %>%
filter(Gruppe == 0) %>%
select(NumbLet_Average_RT, NumbLet_Average_PC) %>%
summarise(meanRT = mean(NumbLet_Average_RT),
meanPC = mean(NumbLet_Average_PC),
sdRT = sd(NumbLet_Average_RT),
sdPC = sd(NumbLet_Average_PC))
## Step 2: Standardize RT and PC for each condition
task_data_clean <- task_data_clean %>%
mutate(Z_Repeat_RT = (Repeat_RT - NumbLet_mean_sd_HC$meanRT) / NumbLet_mean_sd_HC$sdRT,
Z_Switch_RT = (Switch_RT - NumbLet_mean_sd_HC$meanRT) / NumbLet_mean_sd_HC$sdRT,
Z_Repeat_PC = (Repeat_PC - NumbLet_mean_sd_HC$meanPC) / NumbLet_mean_sd_HC$sdPC,
Z_Switch_PC = (Switch_PC - NumbLet_mean_sd_HC$meanPC) / NumbLet_mean_sd_HC$sdPC)
# Step 3: Calculate BIS(Repeat), BIS(Switch) and Difference Score
task_data_clean <- task_data_clean %>%
mutate(NumberLetter_BIS_Repeat = Z_Repeat_PC - Z_Repeat_RT,
NumberLetter_BIS_Switch = Z_Switch_PC - Z_Switch_RT) %>%
mutate(NumberLetter_BIS_Diff_Score = NumberLetter_BIS_Switch - NumberLetter_BIS_Repeat)
## Step 1: Calculate mean and SD for RT and PC across all healthy subjects and all conditions
Stroop_mean_sd_HC <- task_data_clean %>%
filter(Gruppe == 0) %>%
select(Stroop_Average_RT, Stroop_Average_PC) %>%
summarise(meanRT = mean(Stroop_Average_RT),
meanPC = mean(Stroop_Average_PC),
sdRT = sd(Stroop_Average_RT),
sdPC = sd(Stroop_Average_PC))
## Step 2: Standardize RT and PC for each condition
task_data_clean <- task_data_clean %>%
mutate(Z_Congruent_RT = (Congruent_RT - Stroop_mean_sd_HC$meanRT) / Stroop_mean_sd_HC$sdRT,
Z_Incongruent_RT = (Incongruent_RT - Stroop_mean_sd_HC$meanRT) / Stroop_mean_sd_HC$sdRT,
Z_Congruent_PC = (Congruent_PC - Stroop_mean_sd_HC$meanPC) / Stroop_mean_sd_HC$sdPC,
Z_Incongruent_PC = (Incongruent_PC - Stroop_mean_sd_HC$meanPC) / Stroop_mean_sd_HC$sdPC)
# Step 3: Calculate BIS(Congruent), BIS(Incongruent) and Difference Score
task_data_clean <- task_data_clean %>%
mutate(Stroop_BIS_Congruent = Z_Congruent_PC - Z_Congruent_RT,
Stroop_BIS_Incongruent = Z_Incongruent_PC - Z_Incongruent_RT) %>%
mutate(Stroop_BIS_Diff_Score = Stroop_BIS_Incongruent - Stroop_BIS_Congruent)
## Step 1: Calculate mean and SD for RT and PC across all healthy subjects and all conditions
TwoBack_mean_sd_HC <- task_data_clean %>%
filter(Gruppe == 0) %>%
select(TwoBack_Average_RT, TwoBack_Average_PC) %>%
summarise(meanRT = mean(TwoBack_Average_RT),
meanPC = mean(TwoBack_Average_PC),
sdRT = sd(TwoBack_Average_RT),
sdPC = sd(TwoBack_Average_PC))
## Step 2: Standardize RT and PC for each condition
task_data_clean <- task_data_clean %>%
mutate(Z_Total_RT = (TwoBack_Average_RT - TwoBack_mean_sd_HC$meanRT) / TwoBack_mean_sd_HC$sdRT,
Z_Target_RT = (Target_RT - TwoBack_mean_sd_HC$meanRT) / TwoBack_mean_sd_HC$sdRT,
Z_Foil_RT = (Foil_RT - TwoBack_mean_sd_HC$meanRT) / TwoBack_mean_sd_HC$sdRT,
Z_Total_PC = (TwoBack_Average_PC - TwoBack_mean_sd_HC$meanPC) / TwoBack_mean_sd_HC$sdPC,
Z_Target_PC = (Target_PC - TwoBack_mean_sd_HC$meanPC) / TwoBack_mean_sd_HC$sdPC,
Z_Foil_PC = (Foil_PC - TwoBack_mean_sd_HC$meanPC) / TwoBack_mean_sd_HC$sdPC)
# Calculate BIS(Target), BIS(Total) and BIS_Foil
task_data_clean <- task_data_clean %>%
mutate(TwoBack_BIS_Total = Z_Total_PC - Z_Total_RT,
TwoBack_BIS_Target = Z_Target_PC - Z_Target_RT,
TwoBack_BIS_Foil = Z_Foil_PC - Z_Foil_RT)
View(task_data_clean)
file_path_scores <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Performance_Scores/"
write.csv(task_data_clean, paste0(file_path_scores, "Task_Performance_Scores.csv"), row.names = FALSE)
# Reduce task data
task_data_clean_imp <- task_data_clean %>%
select(Subject, Gruppe, NumberLetter_BIS_Repeat, NumberLetter_BIS_Switch, NumberLetter_BIS_Diff_Score, Stroop_BIS_Congruent, Stroop_BIS_Incongruent, Stroop_BIS_Diff_Score, TwoBack_BIS_Foil, TwoBack_BIS_Target, TwoBack_BIS_Total, SSRT, T1_BAT_FAS_score, T3_BAT_FAS_score)
# Add sociodem. & clinical data
all_data <- left_join(x = task_data_clean_imp,
y = data_all %>% select(Subject,
Geschlecht,
Alter,
Abschluss,
T1_BAT_BDI_II_score,
T1_BAT_STAI_T_score,
T1_BAT_BIS_11_score,
T1_BAT_Kirby_k_score,
T1_BAT_CFC_14_score,
T1_BAT_SRHI_score),
by = "Subject")
all_data <- all_data %>%
mutate(Response = ifelse((T1_BAT_FAS_score.x - T3_BAT_FAS_score.x) >= 0.5 * T1_BAT_FAS_score.x, 1, 0))
all_data <- all_data %>%
mutate(Response = ifelse((T1_BAT_FAS_score - T3_BAT_FAS_score) >= 0.5 * T1_BAT_FAS_score, 1, 0))
View(all_data)
split_df <- split(all_data, all_data$Gruppe)
data_HC <- split_df$"0"
data_Pat_pre <- split_df$"1"
data_Pat_post <- split_df$"2"
# Remove Response column from data_HC
data_HC$Response <- NULL
View(data_HC)
split_df <- split(all_data, all_data$Gruppe)
data_HC <- split_df$"0"
data_Pat_pre <- split_df$"1"
data_Pat_post <- split_df$"2"
# Remove Response column from data_HC
# data_HC$Response <- NULL
file_path <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/"
# Write data to CSV
write.csv(data_HC, paste0(file_path, "Data_HC.csv"), row.names = FALSE)
write.csv(data_Pat_pre, paste0(file_path, "Data_Patients_Pre.csv"), row.names = FALSE)
write.csv(data_Pat_post, paste0(file_path, "Data_Patients_Post.csv"), row.names = FALSE)
View(task_data_clean)
View(AllData_NumbLet)
View(AllData_NumbLet)
View(task_data_clean)
class(task_data_clean$Gruppe)
View(task_data_clean)
View(data_Pat_pre)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,rows.print = 6, cols.min.print = 3)
library(tidyverse)
basic_path <- "Z:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses"
task_data <- read.csv(file.path(basic_path,"Performance_Scores/Task_Performance_Scores.csv"))
basic_path <- "Z:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses"
task_data <- read.csv(file.path(basic_path,"Performance_Scores/Task_Performance_Scores.csv"))
basic_path <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses"
task_data <- read.csv(file.path(basic_path,"Performance_Scores/Task_Performance_Scores.csv"))
data_pat_pre <- read.csv(file.path(basic_path,"Data_Patients_Pre.csv"))
features_df <- left_join(x = data_pat_pre,
y = task_data %>% select(NumbLet_Average_PC, Stroop_Average_PC,
TwoBack_Average_PC))
features_df <- left_join(x = data_pat_pre,
y = task_data %>% select(Subject, NumbLet_Average_PC,
Stroop_Average_PC,
TwoBack_Average_PC),
by = "Subject")
View(features_df)
labels_df <- features_df["Response"]
features_df$Response <- NULL
View(labels_df)
View(features_df)
# 1. OneHot-Encoding of variable "Abschluss"
features_df$Abschluss <- as.character(features_df$Abschluss)
dummy <- dummyVars(" ~ Abschluss", data = features_df)
library(caret)
# 1. OneHot-Encoding of variable "Abschluss"
features_df$Abschluss <- as.character(features_df$Abschluss)
dummy <- dummyVars(" ~ Abschluss", data = features_df)
trsf <- data.frame(predict(dummy, newdata = features_df, fullRank=TRUE))
features_df_enc <- cbind(features_df, trsf)
# 2. Drop original variable "Subject", "Abschluss" and "T3_BAT_FAS_score"
features_df_enc$Subject <- NULL
features_df_enc$Abschluss <- NULL
features_df_enc$T3_BAT_FAS_score <- NULL
View(features_df_enc)
features_df_enc <- features_df_enc %>%
rename(is_woman = Geschlecht,
Age = Alter,
FAS = T1_BAT_FAS_score,
BDI_II = T1_BAT_BDI_II_score,
STAI_T = T1_BAT_STAI_T_score,
BIS = T1_BAT_BIS_11_score,
Kirby_k = T1_BAT_Kirby_k_score,
CFC_14 = T1_BAT_CFC_14_score,
SRHI = T1_BAT_SRHI_score,
Hauptschule = Abschluss1,
Realschule = Abschluss2,
Abitur = Abschluss3,
anderer_Abschluss = Abschluss4)

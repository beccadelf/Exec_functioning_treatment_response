recode_results_2 <- dummy_code_education(data_Pat_pre_clean)
data_Pat_pre_clean <- recode_results_2$data_recoded
categorical_vars <- c("Geschlecht", "Abschluss_Gymnasium")
dimensional_vars <- c("Alter", "T1_BAT_FAS_score", "T1_BAT_BDI_II_score", "T1_BAT_STAI_T_score", "T1_BAT_BIS_11_score", "T1_BAT_Kirby_k_score", "T1_BAT_CFC_14_score", "T1_BAT_SRHI_score", "BAT_T1")
t_test_descr_Response <- t_test_mult_cols(df_basis = data_Pat_pre_clean, cols = dimensional_vars, grouping_variable = "Response")
chi_sq_test_descr_Response <- chi_sq_test_mult_cols(df_basis = data_Pat_pre_clean, cols = categorical_vars, grouping_variable = "Response")
t_test_descr_pub_Response <- prepare_ttest_table(ttest_table = t_test_descr_Response, var_type = "dimensional", group_0 = "Non-Responder", group_1 = "Responder")
chi_sq_test_descr_pub_Response <- prepare_ttest_table(ttest_table = chi_sq_test_descr_Response, var_type = "categorical", group_0 = "Non-Responder", group_1 = "Responder")
# Merge the dataframes
descr_comps_Response <- rbind(t_test_descr_pub_Response, chi_sq_test_descr_pub_Response)
# Reorder and rename the variables
descr_comps_Response <- reorder_and_rename_rows(df = descr_comps_Response, col_name = "Variable", label_map = variable_labels)
# Print missings
for (i in seq_len(nrow(descr_comps_Response))) {
miss_NR <- descr_comps_Response$`Missings_Non-Responder`[i]
miss_R <- descr_comps_Response$Missings_Responder[i]
if (miss_NR > 0 || miss_R > 0) {
var_name <- descr_comps_Response$Variable[i]
cat(sprintf("Missing values **%s**: Non-Responder = %s, Responder = %s \n",
var_name, miss_NR, miss_R))
}
}
# Remove columns Missings_HC, Missings_Patients
descr_comps_Response <- descr_comps_Response[, !(names(descr_comps_Response) %in% c("Missings_Non-Responder", "Missings_Responder"))]
# Add number of subjects per group
n_NR <- sum(data_Pat_pre_clean$Response == 0)
n_R <- sum(data_Pat_pre_clean$Response == 1)
n_subjects_row <- data.frame(Variable = "N", `Non-Responder` = n_NR, Responder = n_R, Statistic = "-", stringsAsFactors = FALSE, check.names = FALSE)
descr_comps_Response <- rbind(n_subjects_row, descr_comps_Response)
View(descr_comps_Response)
create_save_flextable(table_pub = descr_comps_Response, results_path = results_path_Response, file_name = "descr_tests_R_vs_NR.docx")
# 1. Subset data frame by non-NA for respective tasks
task_list <- list(
"Stroop Task" = list(
subset_data = data_Pat_pre_clean %>%
filter(!is.na(Stroop_BIS_Congruent) &
!is.na(Stroop_BIS_Incongruent) &
!is.na(Stroop_BIS_Diff_Score))
),
"Number-Letter Task" = list(
subset_data = data_Pat_pre_clean %>%
filter(!is.na(NumberLetter_BIS_Repeat) &
!is.na(NumberLetter_BIS_Switch) &
!is.na(NumberLetter_BIS_Diff_Score))
),
"2-Back Task" = list(
subset_data = data_Pat_pre_clean %>%
filter(!is.na(TwoBack_BIS_Foil) &
!is.na(TwoBack_BIS_Target) &
!is.na(TwoBack_BIS_Total))
),
"Stop-Signal Task" = list(
subset_data = data_Pat_pre_clean %>%
filter(!is.na(SSRT))
)
)
# Loop through the tasks and create tables
characteristics_tables <- lapply(names(task_list), function(task_name) {
data <- task_list[[task_name]]$subset_data
generate_characteristics_table(data, task_name, grouping_variable = Response, group_labels = c("Non-Response", "Response"))
})
# Name the tables for easy reference
names(characteristics_tables) <- names(task_list)
# 3. Combined data frame of task-specific descriptive characteristics
# Calculate N for Healthy Controls and Patients for each task
calculate_n <- function(data) {
data %>%
group_by(Response) %>%
summarize(N = n(), .groups = "drop") %>%
pivot_wider(names_from = Response, values_from = N, names_prefix = "Group_") %>%
rename("Non-Response" = Group_0, "Response" = Group_1)
}
# Get N for each task
stroop_n <- calculate_n(task_list[["Stroop Task"]]$subset_data)
number_letter_n <- calculate_n(task_list[["Number-Letter Task"]]$subset_data)
two_back_n <- calculate_n(task_list[["2-Back Task"]]$subset_data)
ssrt_n <- calculate_n(task_list[["Stop-Signal Task"]]$subset_data)
# Convert the tbl_summary tables to tibbles and rename columns dynamically (no information on specific N needed)
stroop_df <- as_tibble(characteristics_tables[["Stroop Task"]]) %>%
rename_with(~ c("Non-Response", "Response"), .cols = 2:3)
number_letter_df <- as_tibble(characteristics_tables[["Number-Letter Task"]]) %>%
rename_with(~ c("Non-Response", "Response"), .cols = 2:3)
two_back_df <- as_tibble(characteristics_tables[["2-Back Task"]]) %>%
rename_with(~ c("Non-Response", "Response"), .cols = 2:3)
ssrt_df <- as_tibble(characteristics_tables[["Stop-Signal Task"]]) %>%
rename_with(~ c("Non-Response", "Response"), .cols = 2:3)
# Insert the "N" row into each data frame
stroop_df <- rbind(
tibble("**Characteristic**" = "N",
"Non-Response" = stroop_n[["Non-Response"]],
"Response" = stroop_n[["Response"]]),
stroop_df
)
number_letter_df <- rbind(
tibble("**Characteristic**" = "N",
"Non-Response" = number_letter_n[["Non-Response"]],
"Response" = number_letter_n[["Response"]]),
number_letter_df
)
two_back_df <- rbind(
tibble("**Characteristic**" = "N",
"Non-Response" = two_back_n[["Non-Response"]],
"Response" = two_back_n[["Response"]]),
two_back_df
)
ssrt_df <- rbind(
tibble("**Characteristic**" = "N",
"Non-Response" = ssrt_n[["Non-Response"]],
"Response" = ssrt_n[["Response"]]),
ssrt_df
)
# Combine the modified data frames
characteristics_tasks <- cbind(
stroop_df[, "**Characteristic**", drop = FALSE],  # Include "Characteristic" column only once
stroop_df[, -which(names(stroop_df) == "**Characteristic**")],
number_letter_df[, -which(names(number_letter_df) == "**Characteristic**")],
two_back_df[, -which(names(two_back_df) == "**Characteristic**")],
ssrt_df[, -which(names(ssrt_df) == "**Characteristic**")]  # Drop "Characteristic" column from all others
)
# Rename columns to ensure uniqueness
colnames(characteristics_tasks) <- c(
"Characteristic",
"Stroop_NR", "Stroop_R",
"Number_Letter_NR", "Number_Letter_R",
"Two_Back_NR", "Two_Back_R",
"Stop_Signal_NR", "Stop_Signal_R"
)
# Define primary (task) and secondary (HC vs Pat) headers
primary_headers <- c("Characteristic", "Stroop Task", "Stroop Task",
"Number-Letter Task", "Number-Letter Task",
"2-Back Task", "2-Back Task",
"Stop-Signal Task", "Stop-Signal Task")
secondary_headers <- c("Characteristic", "Non-Response", "Response",
"Non-Response", "Response",
"Non-Response", "Response",
"Non-Response", "Response")
# Create a flextable
ft <- flextable(characteristics_tasks)
# Add primary and secondary column headers
ft <- set_header_df(
x = ft,
mapping = data.frame(
keys = colnames(characteristics_tasks),
primary = primary_headers,
secondary = secondary_headers,
stringsAsFactors = FALSE
),
key = "keys"
)
# Merge the primary headers to span across related columns
ft <- merge_h(ft, part = "header")
# Align and format the headers
ft <- align(ft, align = "center", part = "header")
ft <- bold(ft, part = "header")
ft <- autofit(ft)
# Write to Word
save_as_docx(
ft,
path = file.path(results_path_Response, "Characteristics_Response_Nonresponse.docx"),
pr_section = format_flextable_landscape)
ft
# Select columns
columns_n_trimmed <- grep("_n_trimmed_removed_RT$", names(data_Pat_pre_clean), value = TRUE)
columns_n_wrong <- grep("_n_wrong_removed_RT$", names(data_Pat_pre_clean), value = TRUE)
# Create a data frame dynamically
df <- data.frame(
Condition = gsub("_n_trimmed_removed_RT", "", columns_n_trimmed),  # Remove suffix for clean names
n_trimmed_removed = sapply(data_Pat_pre_clean[ columns_n_trimmed], mean, na.rm = TRUE),
n_trimmed_removed_sd = sapply(data_Pat_pre_clean[ columns_n_trimmed], sd, na.rm = TRUE),
n_wrong_removed = sapply(data_Pat_pre_clean[columns_n_wrong], mean, na.rm = TRUE),
n_wrong_removed_sd = sapply(data_Pat_pre_clean[columns_n_wrong], sd, na.rm = TRUE)
)
# Rename variables
df$Condition <- dplyr::recode(df$Condition, Repeat = "Number-Letter: Repeat",
Switch = "Number-Letter: Switch", Congruent = "Stroop: Congruent",
Incongruent = "Stroop: Incongruent", Foil = "2-Back: Foil",
Target = "2-Back: Target")
colnames(df) <- c("Condition", "Number of trials removed due to trimming (Mean)",
"Number of trials removed due to trimming (SD)",
"Number of wrong trials removed (Mean)",
"Number of wrong trials removed (SD)")
# Turn to flextable
ft_removedRT <- flextable(df)
# Round to 2
ft_removedRT <- colformat_double(ft_removedRT, digits = 2)
# Set table properties
ft_removedRT <- set_table_properties(ft_removedRT, width = 1, layout = "autofit")
# Header in bold
ft_removedRT <- bold(ft_removedRT, bold = TRUE, part = "header")
# Alignments
ft_removedRT<- align(ft_removedRT, j = 1, align = "left", part = "all") # first column
ft_removedRT <- align(ft_removedRT, j = 2:ncol(df), align = "center", part = "all") # rest
# Export flextable
save_as_docx(
ft_removedRT,
path = file.path(results_path_Response, "removed_trials_Responder_Nonresponder.docx"),
pr_section = format_flextable_portrait)
# Info for interpreting the results:
# Number-letter: switch 64, Repeat: 63
# Stroop: Congruent: 80 trials, Incongruent: 80 trials
# Spatial 2-back: Foil: 48 trials, Target: 112 trials
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(gtsummary)
library(tidyr)
library(flextable)
# User-defined functions
source("../Useful_functions.R")
format_flextable_portrait <- flextable_settings(word_orientation = "portrait")
format_flextable_landscape <- flextable_settings(word_orientation = "landscape")
basic_path <- file.path(params$input_data_path, "response_FSQ")
data_HC <- read.csv(file.path(basic_path,"Data_HC.csv"))
data_Pat_pre <- read.csv(file.path(basic_path,"Data_Patients_Pre.csv"))
results_path_HC_Pat <- create_results_path(inputdata_path = basic_path,
output_mainpath = params$output_base_path)
# Merge patients pre and controls
Patients_vs_HC <- rbind(data_Pat_pre, data_HC)
# Dummy-code variable education
recode_results_1 <- dummy_code_education(Patients_vs_HC)
Patients_vs_HC <- recode_results_1$data_recoded
categorical_vars <- c("Geschlecht", "Abschluss_Gymnasium")
dimensional_vars <- c("Alter", "T1_BAT_FAS_score", "T1_BAT_BDI_II_score", "T1_BAT_STAI_T_score", "T1_BAT_BIS_11_score", "T1_BAT_Kirby_k_score", "T1_BAT_CFC_14_score", "T1_BAT_SRHI_score", "BAT_T1")
t_test_descr_HC_Pat <- t_test_mult_cols(df_basis = Patients_vs_HC, cols = dimensional_vars, grouping_variable = "Gruppe")
chi_sq_test_descr_HC_Pat <- chi_sq_test_mult_cols(df_basis = Patients_vs_HC, cols = categorical_vars, grouping_variable = "Gruppe")
t_test_descr_pub_HC_Pat <- prepare_ttest_table(ttest_table = t_test_descr_HC_Pat, var_type = "dimensional", group_0 = "Healthy Controls", group_1 = "Patients")
chi_sq_test_descr_pub_HC_Pat <- prepare_ttest_table(ttest_table = chi_sq_test_descr_HC_Pat, var_type = "categorical", group_0 = "Healthy Controls", group_1 = "Patients")
# Merge the dataframes
descr_comps_pub_HC_Pat <- rbind(t_test_descr_pub_HC_Pat, chi_sq_test_descr_pub_HC_Pat)
# Reorder and rename the variables
descr_comps_pub_HC_Pat <- reorder_and_rename_rows(df = descr_comps_pub_HC_Pat, col_name = "Variable", label_map = variable_labels)
# Print missings
for (i in seq_len(nrow(descr_comps_pub_HC_Pat))) {
miss_hc <- descr_comps_pub_HC_Pat$`Missings_Healthy Controls`[i]
miss_pat <- descr_comps_pub_HC_Pat$Missings_Patients[i]
if (miss_hc > 0 || miss_pat > 0) {
var_name <- descr_comps_pub_HC_Pat$Variable[i]
cat(sprintf("Missing values **%s**: Healthy Controls = %s, Patients = %s \n",
var_name, miss_hc, miss_pat))
}
}
# Remove columns Missings_HC, Missings_Patients
descr_comps_pub_HC_Pat <- descr_comps_pub_HC_Pat[, !(names(descr_comps_pub_HC_Pat) %in% c("Missings_Healthy Controls", "Missings_Patients"))]
# Add number of subjects per group
n_HC <- sum(Patients_vs_HC$Gruppe == 0)
n_Patients <- sum(Patients_vs_HC$Gruppe == 1)
n_subjects_row <- data.frame(Variable = "N", `Healthy Controls` = n_HC, Patients = n_Patients, Statistic = "-", stringsAsFactors = FALSE, check.names = FALSE)
descr_comps_pub_HC_Pat <- rbind(n_subjects_row, descr_comps_pub_HC_Pat)
View(descr_comps_pub_HC_Pat)
create_save_flextable(table_pub = descr_comps_pub_HC_Pat, results_path = results_path_HC_Pat, file_name = "descr_tests_Patients_HCs.docx")
# 1. Subset data frame by non-NA for respective tasks
task_list <- list(
"Stroop Task" = list(
subset_data = Patients_vs_HC %>%
filter(!is.na(Stroop_BIS_Congruent) &
!is.na(Stroop_BIS_Incongruent) &
!is.na(Stroop_BIS_Diff_Score))
),
"Number-Letter Task" = list(
subset_data = Patients_vs_HC %>%
filter(!is.na(NumberLetter_BIS_Repeat) &
!is.na(NumberLetter_BIS_Switch) &
!is.na(NumberLetter_BIS_Diff_Score))
),
"2-Back Task" = list(
subset_data = Patients_vs_HC %>%
filter(!is.na(TwoBack_BIS_Foil) &
!is.na(TwoBack_BIS_Target) &
!is.na(TwoBack_BIS_Total))
),
"Stop-Signal Task" = list(
subset_data = Patients_vs_HC %>%
filter(!is.na(SSRT))
)
)
# Loop through the tasks and create tables
characteristics_tables <- lapply(names(task_list), function(task_name) {
data <- task_list[[task_name]]$subset_data
generate_characteristics_table(data, task_name, grouping_variable = Gruppe, group_labels = c("Healthy Controls", "Patients"))
})
# Name the tables for easy reference
names(characteristics_tables) <- names(task_list)
# 3. Combined data frame of task-specific descriptive characteristics
# Calculate N for Healthy Controls and Patients for each task
calculate_n <- function(data) {
data %>%
group_by(Gruppe) %>%
summarize(N = n(), .groups = "drop") %>%
pivot_wider(names_from = Gruppe, values_from = N, names_prefix = "Group_") %>%
rename("Healthy Controls" = Group_0, "Patients" = Group_1)
}
# Get N for each task
stroop_n <- calculate_n(task_list[["Stroop Task"]]$subset_data)
number_letter_n <- calculate_n(task_list[["Number-Letter Task"]]$subset_data)
two_back_n <- calculate_n(task_list[["2-Back Task"]]$subset_data)
ssrt_n <- calculate_n(task_list[["Stop-Signal Task"]]$subset_data)
# Convert the tbl_summary tables to tibbles and rename columns dynamically (no information on specific N needed)
stroop_df <- as_tibble(characteristics_tables[["Stroop Task"]]) %>%
rename_with(~ c("Healthy Controls", "Patients"), .cols = 2:3)
number_letter_df <- as_tibble(characteristics_tables[["Number-Letter Task"]]) %>%
rename_with(~ c("Healthy Controls", "Patients"), .cols = 2:3)
two_back_df <- as_tibble(characteristics_tables[["2-Back Task"]]) %>%
rename_with(~ c("Healthy Controls", "Patients"), .cols = 2:3)
ssrt_df <- as_tibble(characteristics_tables[["Stop-Signal Task"]]) %>%
rename_with(~ c("Healthy Controls", "Patients"), .cols = 2:3)
# Insert the "N" row into each data frame
stroop_df <- rbind(
tibble("**Characteristic**" = "N",
"Healthy Controls" = stroop_n[["Healthy Controls"]],
"Patients" = stroop_n[["Patients"]]),
stroop_df
)
number_letter_df <- rbind(
tibble("**Characteristic**" = "N",
"Healthy Controls" = number_letter_n[["Healthy Controls"]],
"Patients" = number_letter_n[["Patients"]]),
number_letter_df
)
two_back_df <- rbind(
tibble("**Characteristic**" = "N",
"Healthy Controls" = two_back_n[["Healthy Controls"]],
"Patients" = two_back_n[["Patients"]]),
two_back_df
)
ssrt_df <- rbind(
tibble("**Characteristic**" = "N",
"Healthy Controls" = ssrt_n[["Healthy Controls"]],
"Patients" = ssrt_n[["Patients"]]),
ssrt_df
)
# Combine the modified data frames
characteristics_tasks <- cbind(
stroop_df[, "**Characteristic**", drop = FALSE],  # Include "Characteristic" column only once
stroop_df[, -which(names(stroop_df) == "**Characteristic**")],
number_letter_df[, -which(names(number_letter_df) == "**Characteristic**")],
two_back_df[, -which(names(two_back_df) == "**Characteristic**")],
ssrt_df[, -which(names(ssrt_df) == "**Characteristic**")]  # Drop "Characteristic" column from all others
)
# Create Flextable
# Rename columns to ensure uniqueness
colnames(characteristics_tasks) <- c(
"Characteristic",
"Stroop_Healthy_Controls", "Stroop_Patients",
"Number_Letter_Healthy_Controls", "Number_Letter_Patients",
"Two_Back_Healthy_Controls", "Two_Back_Patients",
"Stop_Signal_Healthy_Controls", "Stop_Signal_Patients"
)
# Define primary (task) and secondary (HC vs Pat) headers
primary_headers <- c("Characteristic", "Stroop Task", "Stroop Task",
"Number-Letter Task", "Number-Letter Task",
"2-Back Task", "2-Back Task",
"Stop-Signal Task", "Stop-Signal Task")
secondary_headers <- c("Characteristic", "Healthy Controls", "Patients",
"Healthy Controls", "Patients",
"Healthy Controls", "Patients",
"Healthy Controls", "Patients")
# Create a flextable
ft <- flextable(characteristics_tasks)
# Add primary and secondary column headers
ft <- set_header_df(
x = ft,
mapping = data.frame(
keys = colnames(characteristics_tasks),
primary = primary_headers,
secondary = secondary_headers,
stringsAsFactors = FALSE
),
key = "keys"
)
# Merge the primary headers to span across related columns
ft <- merge_h(ft, part = "header")
# Align and format the headers
ft <- align(ft, align = "center", part = "header")
ft <- bold(ft, part = "header")
ft <- autofit(ft)
# Write to Word
save_as_docx(
ft,
path =file.path(results_path_HC_Pat, "Characteristics_Patients_HCs.docx"),
pr_section = format_flextable_portrait)
ft
# Select columns
columns_n_trimmed <- grep("_n_trimmed_removed_RT$", names(Patients_vs_HC), value = TRUE)
columns_n_wrong <- grep("_n_wrong_removed_RT$", names(Patients_vs_HC), value = TRUE)
# Create a data frame dynamically
df <- data.frame(
Condition = gsub("_n_trimmed_removed_RT", "", columns_n_trimmed),  # Remove suffix for clean names
n_trimmed_removed = sapply(Patients_vs_HC[ columns_n_trimmed], mean, na.rm = TRUE),
n_trimmed_removed_sd = sapply(Patients_vs_HC[ columns_n_trimmed], sd, na.rm = TRUE),
n_wrong_removed = sapply(Patients_vs_HC[columns_n_wrong], mean, na.rm = TRUE),
n_wrong_removed_sd = sapply(Patients_vs_HC[columns_n_wrong], sd, na.rm = TRUE)
)
# Rename variables
df$Condition <- dplyr::recode(df$Condition, Repeat = "Number-Letter: Repeat",
Switch = "Number-Letter: Switch", Congruent = "Stroop: Congruent",
Incongruent = "Stroop: Incongruent", Foil = "2-Back: Foil",
Target = "2-Back: Target")
colnames(df) <- c("Condition", "Number of trials removed due to trimming (Mean)",
"Number of trials removed due to trimming (SD)",
"Number of wrong trials removed (Mean)",
"Number of wrong trials removed (SD)")
# Turn to flextable
ft_removedRT <- flextable(df)
# Round to 2
ft_removedRT <- colformat_double(ft_removedRT, digits = 2)
# Set table properties
ft_removedRT <- set_table_properties(ft_removedRT, width = 1, layout = "autofit")
# Header in bold
ft_removedRT <- bold(ft_removedRT, bold = TRUE, part = "header")
# Alignments
ft_removedRT<- align(ft_removedRT, j = 1, align = "left", part = "all") # first column
ft_removedRT <- align(ft_removedRT, j = 2:ncol(df), align = "center", part = "all") # rest
# Export flextable
save_as_docx(
ft_removedRT,
path = file.path(results_path_HC_Pat, "removed_trials_Patients_HCs.docx"),
pr_section = format_flextable_portrait)
# Info for interpreting the results:
# Number-letter: switch 64, Repeat: 63
# Stroop: Congruent: 80 trials, Incongruent: 80 trials
# Spatial 2-back: Foil: 48 trials, Target: 112 trials
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(pander)
library(effsize)
library(pwr)
library(gtsummary)
library(gt)
library(car)
library(flextable)
library(officer)
library(broom)
library(knitr)
# User-defined functions
source("../Useful_functions.R")
basic_path = file.path(params$input_data_path, "response_FSQ")
data_HC <- read.csv(file.path(basic_path,"Data_HC.csv"))
data_Pat_pre <- read.csv(file.path(basic_path,"Data_Patients_Pre.csv"))
results_path <- create_results_path(inputdata_path = basic_path,
output_mainpath = params$output_base_path)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(pander)
library(effsize)
library(pwr)
library(gtsummary)
library(stats)
library(lmtest)
library(sandwich)
library(nlme)
library(flextable)
source("../Useful_functions.R")
basic_path <- file.path(params$input_data_path, "response_FSQ")
results_path <- create_results_path(inputdata_path = basic_path,
output_mainpath = params$output_base_path)
generate_htmlfilename_analyses <- function(input_data_path, prefix, response_criterion = NULL) {
# This function creates the html-filename based on the preprocessing of the input data
# Get the name of the input data folder as it tells us whether outliers were removed
last_folder <- basename(input_data_path)
# Get the second-to-last folder as it tells how the mean RT was calculated
parent_dir <- dirname(input_data_path)
grandparent_dir <- dirname(parent_dir)
third_last_folder <- basename(grandparent_dir)
filename <- paste0(prefix,"_", third_last_folder, "_", last_folder)
if (!is.null(response_criterion)) {
filename <- paste0(filename, "_", response_criterion)
}
paste0(filename, ".html")
}
input_data_path <- "Y:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/0_Datapreparation/RT_trimmed_RT_wrong_removed/BIS/outliers-removed/response_FSQ"
last_folder <- basename(input_data_path)
parent_dir <- dirname(input_data_path)
input_data_path <- "Y:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/0_Datapreparation/RT_trimmed_RT_wrong_removed/BIS/outliers-removed"
last_folder <- basename(input_data_path)
parent_dir <- dirname(input_data_path)
grandparent_dir <- dirname(parent_dir)
third_last_folder <- basename(grandparent_dir)
filename <- paste0(prefix,"_", third_last_folder, "_", last_folder)
filename <- paste0("HC_vs_patients","_", third_last_folder, "_", last_folder)
full_input_path <- file.path(input_data_path, "response_FSQ")
results_path <- create_results_path(inputdata_path = full_input_path, output_mainpath = "Y:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/1_Group_comparison/HC_vs_Pat")
source("Useful_functions.R")
getwd()
setwd("C:/Users/Acer/Documents/GitHub/Exec_functioning_treatment_response")
source("Useful_functions.R")
results_path <- create_results_path(inputdata_path = full_input_path, output_mainpath = "Y:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/1_Group_comparison/HC_vs_Pat")
output_filename <- generate_htmlfilename_analyses(input_data_path, prefix = "HC_vs_patients")
output_path <- file.path(results_path, output_filename)
full_input_path <- file.path(input_data_path, "response_FSQ")
params_list <- list(
input_data_path = input_data_path,
response_criterion = "response_FSQ",
output_base_path = "Y:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/1_Group_comparison/R_vs_NR")
base_results_path <- create_results_path(
inputdata_path = full_input_path,
output_mainpath = params_list$output_base_path
)
results_path <- file.path(base_results_path, params_list$response_criterion)
output_filename <- generate_htmlfilename_analyses(input_data_path, prefix = "Response_vs_Nonresponse")
output_path <- file.path(results_path, output_filename)
generate_htmlfilename_BIS <- function(outliers_removed) {
# Get the name of the input data folder as it tells us how the mean RT was calculated
last_folder <- basename(input_data_path)
outliers_text <- ifelse(outliers_removed == "yes", "outliers-removed", "outliers-not-removed")
paste0("Add_groupinfo_calc_BIS_", last_folder, "_", outliers_text,".html")
}
output_filename <- generate_htmlfilename_BIS("yes")
input_data_path <- "Y:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/0_Datapreparation/RT_trimmed_RT_wrong_removed"
output_filename <- generate_htmlfilename_BIS("yes")

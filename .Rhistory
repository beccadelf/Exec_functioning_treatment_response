results_df$Model <- ifelse(grepl("random_forest_classifier_yes_oversampling", results_df$FolderName),
"Random Forest (Oversampled)",
ifelse(grepl("random_forest_classifier_yes_smote_oversampling", results_df$FolderName),
"Random Forest (Smote Oversampled)",
ifelse(grepl("random_forest_classifier_no_oversampling", results_df$FolderName),
"Random Forest",
ifelse(grepl("svm_classifier_yes_oversampling", results_df$FolderName),
"SVM (Oversampled)",
ifelse(grepl("svm_classifier_no_oversampling", results_df$FolderName),
"SVM", NA)))))
# Define feature sets and specify colors
colors <- c("Clinical Features" = "white", "Clinical + Executive Functioning Features" = "#D3D3D3")
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical +\nExecutive Functioning Features")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive Functioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
ggsave("C:/Users/Acer/Documents/Studentischer Hilfsjob/FOR5187 Precision Psychotherapy/Exec_functions_paper/Classification_results_plot.png", plot = classification_plot, width = 16, height = 9, dpi = 300)
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_classifier_yes_oversampling", results_df$FolderName),
"Random Forest (Oversampled)",
ifelse(grepl("random_forest_classifier_yes_smote_oversampling", results_df$FolderName),
"Random Forest (Smote Oversampled)",
ifelse(grepl("random_forest_classifier_no_oversampling", results_df$FolderName),
"Random Forest",
ifelse(grepl("svm_classifier_yes_oversampling", results_df$FolderName),
"SVM (Oversampled)",
ifelse(grepl("svm_classifier_no_oversampling", results_df$FolderName),
"SVM", NA)))))
# Define feature sets and specify colors
colors <- c("Clinical Features" = "white", "Clinical + Executive Functioning Features" = "#D3D3D3")
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical +\nExecutive Functioning Features")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical +\nExecutive Functioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_classifier_yes_oversampling", results_df$FolderName),
"Random Forest (Oversampled)",
ifelse(grepl("random_forest_classifier_yes_smote_oversampling", results_df$FolderName),
"Random Forest (Smote Oversampled)",
ifelse(grepl("random_forest_classifier_no_oversampling", results_df$FolderName),
"Random Forest",
ifelse(grepl("svm_classifier_yes_oversampling", results_df$FolderName),
"SVM (Oversampled)",
ifelse(grepl("svm_classifier_no_oversampling", results_df$FolderName),
"SVM", NA)))))
# Define feature sets and specify colors
colors <- c("Clinical Features" = "white", "Clinical + Executive Functioning Features" = "#D3D3D3")
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_classifier_yes_oversampling", results_df$FolderName),
"Random Forest\n(Oversampled)",
ifelse(grepl("random_forest_classifier_yes_smote_oversampling", results_df$FolderName),
"Random Forest\n(Smote Oversampled)",
ifelse(grepl("random_forest_classifier_no_oversampling", results_df$FolderName),
"Random Forest",
ifelse(grepl("svm_classifier_yes_oversampling", results_df$FolderName),
"SVM\n(Oversampled)",
ifelse(grepl("svm_classifier_no_oversampling", results_df$FolderName),
"SVM", NA)))))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
classification_plot
ggsave("C:/Users/Acer/Documents/Studentischer Hilfsjob/FOR5187 Precision Psychotherapy/Exec_functions_paper/Classification_results_plot.png", plot = classification_plot, width = 16, height = 9, dpi = 300)
create_regression_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_regressor", results_df$FolderName), "Random Forest",
ifelse(grepl("ridge_regressor", results_df$FolderName), "Ridge", NA))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=MSE, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Mean squared error",  x = "", fill = "Feature Set") +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
regression_plot <- create_regression_plot(results_df = regression_results)
regression_plot
ggsave("C:/Users/Acer/Documents/Studentischer Hilfsjob/FOR5187 Precision Psychotherapy/Exec_functions_paper/Classification_results_plot.png", plot = classification_plot, width = 16, height = 9, dpi = 300)
ggsave("C:/Users/Acer/Documents/Studentischer Hilfsjob/FOR5187 Precision Psychotherapy/Exec_functions_paper/Regression_results_plot.png", plot = regression_plot, width = 16, height = 9, dpi = 300)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Classification_results_plot.png", plot = classification_plot, width = 16, height = 9, dpi = 300)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Regression_results_plot.png", plot = regression_plot, width = 16, height = 9, dpi = 300)
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_classifier_yes_oversampling", results_df$FolderName),
"Random Forest\n(Oversampled)",
ifelse(grepl("random_forest_classifier_yes_smote_oversampling", results_df$FolderName),
"Random Forest\n(Smote Oversampled)",
ifelse(grepl("random_forest_classifier_no_oversampling", results_df$FolderName),
"Random Forest",
ifelse(grepl("svm_classifier_yes_oversampling", results_df$FolderName),
"SVM\n(Oversampled)",
ifelse(grepl("svm_classifier_no_oversampling", results_df$FolderName),
"SVM", NA)))))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced Accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
create_regression_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_regressor", results_df$FolderName), "Random Forest",
ifelse(grepl("ridge_regressor", results_df$FolderName), "Ridge", NA))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=MSE, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Mean Squared Error",  x = "", fill = "Feature Set") +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
regression_plot <- create_regression_plot(results_df = regression_results)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Classification_results_plot.png", plot = classification_plot, width = 16, height = 9, dpi = 300)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Regression_results_plot.png", plot = regression_plot, width = 16, height = 9, dpi = 300)
family = "Arial"
theme_set(theme_bw() + theme(text = element_text(family = family),
axis.title = element_text(size = 24),
axis.title.y = element_text(size = 24, margin = margin(r = 30)),
axis.text = element_text(size = 18),
#legend.text = element_text(size = 18),
strip.text = element_text(size = 20)
#plot.title = element_text(size = size_text, family = family)
#panel.spacing.x = unit(3, "lines")
))
# or theme_classic()
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_classifier_yes_oversampling", results_df$FolderName),
"Random Forest\n(Oversampled)",
ifelse(grepl("random_forest_classifier_yes_smote_oversampling", results_df$FolderName),
"Random Forest\n(Smote Oversampled)",
ifelse(grepl("random_forest_classifier_no_oversampling", results_df$FolderName),
"Random Forest",
ifelse(grepl("svm_classifier_yes_oversampling", results_df$FolderName),
"SVM\n(Oversampled)",
ifelse(grepl("svm_classifier_no_oversampling", results_df$FolderName),
"SVM", NA)))))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced Accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
create_regression_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_regressor", results_df$FolderName), "Random Forest",
ifelse(grepl("ridge_regressor", results_df$FolderName), "Ridge", NA))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=MSE, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Mean Squared Error",  x = "", fill = "Feature Set") +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
regression_plot <- create_regression_plot(results_df = regression_results)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Classification_results_plot.png", plot = classification_plot, width = 16, height = 9, dpi = 300)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Regression_results_plot.png", plot = regression_plot, width = 16, height = 9, dpi = 300)
family = "Arial"
theme_set(theme_bw() + theme(text = element_text(family = family),
axis.title = element_text(size = 24),
axis.title.y = element_text(size = 24, margin = margin(r = 30)),
axis.text = element_text(size = 18),
#legend.text = element_text(size = 18),
strip.text = element_text(size = 20),
#plot.title = element_text(size = size_text, family = family)
panel.spacing.x = unit(3, "lines")
))
# or theme_classic()
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_classifier_yes_oversampling", results_df$FolderName),
"Random Forest\n(Oversampled)",
ifelse(grepl("random_forest_classifier_yes_smote_oversampling", results_df$FolderName),
"Random Forest\n(Smote Oversampled)",
ifelse(grepl("random_forest_classifier_no_oversampling", results_df$FolderName),
"Random Forest",
ifelse(grepl("svm_classifier_yes_oversampling", results_df$FolderName),
"SVM\n(Oversampled)",
ifelse(grepl("svm_classifier_no_oversampling", results_df$FolderName),
"SVM", NA)))))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced Accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
create_regression_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_regressor", results_df$FolderName), "Random Forest",
ifelse(grepl("ridge_regressor", results_df$FolderName), "Ridge", NA))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=MSE, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Mean Squared Error",  x = "", fill = "Feature Set") +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
regression_plot <- create_regression_plot(results_df = regression_results)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Classification_results_plot.png", plot = classification_plot, width = 16, height = 9, dpi = 300)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Regression_results_plot.png", plot = regression_plot, width = 16, height = 9, dpi = 300)
family = "Arial"
theme_set(theme_bw() + theme(text = element_text(family = family),
axis.title = element_text(size = 24),
axis.title.y = element_text(size = 24, margin = margin(r = 30)),
axis.text = element_text(size = 18),
#legend.text = element_text(size = 18),
strip.text = element_text(size = 20)
#plot.title = element_text(size = size_text, family = family)
#panel.spacing.x = unit(3, "lines")
))
# or theme_classic()
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_classifier_yes_oversampling", results_df$FolderName),
"Random Forest\n(Oversampled)",
ifelse(grepl("random_forest_classifier_yes_smote_oversampling", results_df$FolderName),
"Random Forest\n(Smote Oversampled)",
ifelse(grepl("random_forest_classifier_no_oversampling", results_df$FolderName),
"Random Forest",
ifelse(grepl("svm_classifier_yes_oversampling", results_df$FolderName),
"SVM\n(Oversampled)",
ifelse(grepl("svm_classifier_no_oversampling", results_df$FolderName),
"SVM", NA)))))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced Accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
create_regression_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_regressor", results_df$FolderName), "Random Forest",
ifelse(grepl("ridge_regressor", results_df$FolderName), "Ridge", NA))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=MSE, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Mean Squared Error",  x = "", fill = "Feature Set") +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
regression_plot <- create_regression_plot(results_df = regression_results)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Classification_results_plot.png", plot = classification_plot, width = 16, height = 9, dpi = 300)
ggsave("Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/Regression_results_plot.png", plot = regression_plot, width = 16, height = 9, dpi = 300)

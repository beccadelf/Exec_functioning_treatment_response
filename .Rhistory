geom_violin(position = position_dodge(width = 0.8)) +
stat_summary(fun.data = mean_sdl, geom = "pointrange", # mult = 2 (SD) by default
position = position_dodge(width = 0.8)) + # width = 0.65, fatten = 2
facet_wrap(~ Task, scales = "free") +
labs(x = "",
y = "Performance Score",
fill = "Group") +
scale_x_discrete(labels = function(x) {
x[x == "Diff_Score"] <- "Difference \nScore"
x[x == "Diff_Score Stroop"] <- "Difference \nScore"
x[x == "Total"] <- "Difference \nScore"
return(x)
}) +
scale_fill_manual(values = c("Healthy Controls" = "#D3D3D3", #colors
"Patients" = "#48CFCB")) +
theme_bw() +
theme(
text = element_text(family = "Arial"), #Font
axis.title = element_text(size = 24),
axis.title.y = element_text(size = 24, margin = margin(r = 30)),
axis.text = element_text(size = 18),
legend.title = element_text(size = 24),
legend.text = element_text(size = 18),
strip.text = element_text(size = 20),
panel.spacing.x = unit(3, "lines")
)
print(violin_plots_patients_hc)
ggsave(file.path(results_path, "violin_plots_patients_hc.png"),
plot = violin_plots_patients_hc, width = 16, height = 9, dpi = 300)
# Create boxplots
boxplots_Patients_HC <- ggplot(Patients_vs_HC_long, aes(x = Condition, y = BIS_Score, color = Gruppe)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(position = position_jitterdodge(),
size = 0.7,
shape = 21,
fill = NA) +
facet_wrap(~ Task, scales = "free") +
#facet_grid(rows = vars(Task), scales = "free_x") +
labs(title = "Boxplots of Task Condition by Group",
x = "Condition",
y = "BIS-Score",
color = "Group")
print(boxplots_Patients_HC)
ggsave(file.path(results_path, "boxplots_patients_hc.png"),
plot = boxplots_Patients_HC, width = 16, height = 9, dpi = 300)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(pander)
library(effsize)
library(pwr)
library(gtsummary)
library(gt)
library(car)
library(flextable)
library(officer)
# User-defined functions
source("../Useful_functions.R")
format_flextable_portrait <- flextable_settings(word_orientation = "portrait")
format_flextable_landscape <- flextable_settings(word_orientation = "landscape")
basic_path <- params$input_data_path
data_Pat_pre <- read.csv(file.path(basic_path,"Data_Patients_Pre.csv"))
results_path <- create_results_path(inputdata_path = basic_path,
output_mainpath =
"Y:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/1_Group_comparison/R_vs_NR"
)
data_Pat_pre_clean <- data_Pat_pre[!is.na(data_Pat_pre$Response),]
# 1. Subset data frame by non-NA for respective tasks
task_list <- list(
"Stroop Task" = list(
subset_data = data_Pat_pre_clean %>%
filter(!is.na(Stroop_BIS_Congruent) &
!is.na(Stroop_BIS_Incongruent) &
!is.na(Stroop_BIS_Diff_Score))
),
"Number-Letter Task" = list(
subset_data = data_Pat_pre_clean %>%
filter(!is.na(NumberLetter_BIS_Repeat) &
!is.na(NumberLetter_BIS_Switch) &
!is.na(NumberLetter_BIS_Diff_Score))
),
"2-Back Task" = list(
subset_data = data_Pat_pre_clean %>%
filter(!is.na(TwoBack_BIS_Foil) &
!is.na(TwoBack_BIS_Target) &
!is.na(TwoBack_BIS_Total))
),
"Stop Signal Task" = list(
subset_data = data_Pat_pre_clean %>%
filter(!is.na(SSRT))
)
)
# 2. Function to generate characteristics table
generate_characteristics_table <- function(data, task_name) {
data %>%
select(Response, Alter, Geschlecht, Abschluss,
T1_BAT_BDI_II_score, T1_BAT_BIS_11_score, T1_BAT_CFC_14_score,
T1_BAT_FAS_score, T1_BAT_Kirby_k_score, T1_BAT_SRHI_score, T1_BAT_STAI_T_score) %>%
mutate(Response = factor(Response, levels = c(1, 0), labels = c("Response", "Non-Response")),
Geschlecht = factor(Geschlecht, levels = c(0, 1), labels = c("Male", "Female")),
Abschluss = factor(Abschluss, levels = c(1, 2, 3, 4),
labels = c("Basic secondary education",
"Intermediate secondary education",
"Higher secondary education",
"Other"))) %>%
tbl_summary(by = Response,  # Compare by Response
digits = list(T1_BAT_BDI_II_score = c(1, 1),
T1_BAT_BIS_11_score = c(1, 1),
T1_BAT_CFC_14_score = c(1, 1),
T1_BAT_FAS_score = c(1, 1),
T1_BAT_SRHI_score = c(1, 1),
T1_BAT_STAI_T_score= c(1, 1)),
label = list(
Alter ~ "Age",
Geschlecht ~ "Sex",
Abschluss ~ "Education",
T1_BAT_BDI_II_score ~ "BDI-II Score",
T1_BAT_BIS_11_score ~ "BIS-11 Score",
T1_BAT_CFC_14_score ~ "CFC-14 Score",
T1_BAT_FAS_score ~ "FSQ Score",
T1_BAT_Kirby_k_score ~ "Kirby k Score",
T1_BAT_SRHI_score ~ "SRHI Score",
T1_BAT_STAI_T_score ~ "STAI-T Score"
),
statistic = list(
all_continuous() ~ "{mean} ({sd})",
all_categorical() ~ "{n} ({p}%)"
),
missing = "no"
) %>%
modify_header(label ~ "**Characteristic**") %>%
modify_spanning_header(
starts_with("T1_BAT_") ~ "**Baseline Assessment**"
) %>%
# Remove the row for "Male" in sex
modify_table_body(
~ .x %>% filter(!(variable == "Geschlecht" & label == "Male"))
)
}
# Loop through the tasks and create tables
characteristics_tables <- lapply(names(task_list), function(task_name) {
data <- task_list[[task_name]]$subset_data
generate_characteristics_table(data, task_name)
})
# Name the tables for easy reference
names(characteristics_tables) <- names(task_list)
# 3. Combined data frame of task-specific descriptive characteristics
# Calculate N for Healthy Controls and Patients for each task
calculate_n <- function(data) {
data %>%
group_by(Response) %>%
summarize(N = n(), .groups = "drop") %>%
pivot_wider(names_from = Response, values_from = N, names_prefix = "Group_") %>%
rename("Non-Response" = Group_0, "Response" = Group_1)
}
# Get N for each task
stroop_n <- calculate_n(task_list[["Stroop Task"]]$subset_data)
number_letter_n <- calculate_n(task_list[["Number-Letter Task"]]$subset_data)
two_back_n <- calculate_n(task_list[["2-Back Task"]]$subset_data)
ssrt_n <- calculate_n(task_list[["Stop Signal Task"]]$subset_data)
# Convert the tbl_summary tables to tibbles and rename columns dynamically (no information on specific N needed)
stroop_df <- as_tibble(characteristics_tables[["Stroop Task"]]) %>%
rename_with(~ c("Non-Response", "Response"), .cols = 2:3)
number_letter_df <- as_tibble(characteristics_tables[["Number-Letter Task"]]) %>%
rename_with(~ c("Non-Response", "Response"), .cols = 2:3)
two_back_df <- as_tibble(characteristics_tables[["2-Back Task"]]) %>%
rename_with(~ c("Non-Response", "Response"), .cols = 2:3)
ssrt_df <- as_tibble(characteristics_tables[["Stop Signal Task"]]) %>%
rename_with(~ c("Non-Response", "Response"), .cols = 2:3)
# Insert the "N" row into each data frame
stroop_df <- rbind(
tibble("**Characteristic**" = "N",
"Non-Response" = stroop_n[["Non-Response"]],
"Response" = stroop_n[["Response"]]),
stroop_df
)
number_letter_df <- rbind(
tibble("**Characteristic**" = "N",
"Non-Response" = number_letter_n[["Non-Response"]],
"Response" = number_letter_n[["Response"]]),
number_letter_df
)
two_back_df <- rbind(
tibble("**Characteristic**" = "N",
"Non-Response" = two_back_n[["Non-Response"]],
"Response" = two_back_n[["Response"]]),
two_back_df
)
ssrt_df <- rbind(
tibble("**Characteristic**" = "N",
"Non-Response" = ssrt_n[["Non-Response"]],
"Response" = ssrt_n[["Response"]]),
ssrt_df
)
# Combine the modified data frames
characteristics_tasks <- cbind(
stroop_df[, "**Characteristic**", drop = FALSE],  # Include "Characteristic" column only once
stroop_df[, -which(names(stroop_df) == "**Characteristic**")],
number_letter_df[, -which(names(number_letter_df) == "**Characteristic**")],
two_back_df[, -which(names(two_back_df) == "**Characteristic**")],
ssrt_df[, -which(names(ssrt_df) == "**Characteristic**")]  # Drop "Characteristic" column from all others
)
# Rename columns to ensure uniqueness
colnames(characteristics_tasks) <- c(
"Characteristic",
"Stroop_NR", "Stroop_R",
"Number_Letter_NR", "Number_Letter_R",
"Two_Back_NR", "Two_Back_R",
"Stop_Signal_NR", "Stop_Signal_R"
)
# Define primary (task) and secondary (HC vs Pat) headers
primary_headers <- c("Characteristic", "Stroop Task", "Stroop Task",
"Number-Letter Task", "Number-Letter Task",
"2-Back Task", "2-Back Task",
"Stop Signal Task", "Stop Signal Task")
secondary_headers <- c("Characteristic", "Non-Response", "Response",
"Non-Response", "Response",
"Non-Response", "Response",
"Non-Response", "Response")
# Create a flextable
ft <- flextable(characteristics_tasks)
# Add primary and secondary column headers
ft <- set_header_df(
x = ft,
mapping = data.frame(
keys = colnames(characteristics_tasks),
primary = primary_headers,
secondary = secondary_headers,
stringsAsFactors = FALSE
),
key = "keys"
)
# Merge the primary headers to span across related columns
ft <- merge_h(ft, part = "header")
# Align and format the headers
ft <- align(ft, align = "center", part = "header")
ft <- bold(ft, part = "header")
ft <- autofit(ft)
# Write to Word
save_as_docx(
ft,
path = file.path(results_path, "Characteristics_Response_Nonresponse.docx"),
pr_section = format_flextable_landscape)
ft
library(dplyr)
# Select columns
columns_n_trimmed <- grep("_n_trimmed_removed_RT$", names(data_Pat_pre_clean), value = TRUE)
columns_n_wrong <- grep("_n_wrong_removed_RT$", names(data_Pat_pre_clean), value = TRUE)
# Create a data frame dynamically
df <- data.frame(
Condition = gsub("_n_trimmed_removed_RT", "", columns_n_trimmed),  # Remove suffix for clean names
n_trimmed_removed = sapply(data_Pat_pre_clean[ columns_n_trimmed], mean, na.rm = TRUE),
n_trimmed_removed_sd = sapply(data_Pat_pre_clean[ columns_n_trimmed], sd, na.rm = TRUE),
n_wrong_removed = sapply(data_Pat_pre_clean[columns_n_wrong], mean, na.rm = TRUE),
n_wrong_removed_sd = sapply(data_Pat_pre_clean[columns_n_wrong], sd, na.rm = TRUE)
)
# Rename variables
df$Condition <- dplyr::recode(df$Condition, Repeat = "Number-Letter: Repeat",
Switch = "Number-Letter: Switch", Congruent = "Stroop: Congruent",
Incongruent = "Stroop: Incongruent", Foil = "2-Back: Foil",
Target = "2-Back: Target")
colnames(df) <- c("Condition", "Number of trials removed due to trimming (Mean)",
"Number of trials removed due to trimming (SD)",
"Number of wrong trials removed (Mean)",
"Number of wrong trials removed (SD)")
# Turn to flextable
ft_removedRT <- flextable(df)
# Round to 2
ft_removedRT <- colformat_double(ft_removedRT, digits = 2)
# Set table properties
ft_removedRT <- set_table_properties(ft_removedRT, width = 1, layout = "autofit")
# Header in bold
ft_removedRT <- bold(ft_removedRT, bold = TRUE, part = "header")
# Alignments
ft_removedRT<- align(ft_removedRT, j = 1, align = "left", part = "all") # first column
ft_removedRT <- align(ft_removedRT, j = 2:ncol(df), align = "center", part = "all") # rest
# Export flextable
save_as_docx(
ft_removedRT,
path = file.path(results_path, "removed_trials_Responder_Nonresponder.docx"),
pr_section = format_flextable_portrait)
# Info for interpreting the results:
# Number-letter: switch 64, Repeat: 63
# Stroop: Congruent: 80 trials, Incongruent: 80 trials
# Spatial 2-back: Foil: 48 trials, Target: 112 trials
# Ensure "Response" is treated as a factor
data_Pat_pre_clean$Response <- as.factor(data_Pat_pre_clean$Response)
# Define the columns for which to perform the test (i.e., task performance measures)
imp_columns <- c("NumberLetter_BIS_Repeat", "NumberLetter_BIS_Switch",
"NumberLetter_BIS_Diff_Score", "Stroop_BIS_Congruent",
"Stroop_BIS_Incongruent", "Stroop_BIS_Diff_Score",
"TwoBack_BIS_Foil", "TwoBack_BIS_Target", "TwoBack_BIS_Total",
"SSRT")
levene_test_table <- levene_test_mult_cols(df_basis = data_Pat_pre_clean, cols = imp_columns, grouping_variable = "Response")
#pander(levene_test_table, style = "rmarkdown", fontsize = "tiny")
levene_test_table
t_test_table <- t_test_mult_cols(df_basis = data_Pat_pre_clean, cols = imp_columns, df_results_columns = ttest_results_columns, grouping_variable = "Response")
#pander(t_test_table, style = "rmarkdown", split.table = Inf, fontsize = "tiny")
t_test_table
t_test_table_pub <- cbind(performance_measures = rownames(t_test_table), t_test_table)
# Combine "Mean" and "SD" columns and reduce dataframe
t_test_table_pub <- t_test_table_pub %>%
mutate(
`Responder Mean (SD)` = paste0(round(group_1_mean, 2), " (", round(group_1_sd, 2), ")"),
`Nonresponder Mean (SD)` = paste0(round(group_0_mean, 2), " (", round(group_0_sd, 2), ")")
) %>%
select(performance_measures, `Responder Mean (SD)`, `Nonresponder Mean (SD)`, df, t_statistic, effect_size, p_value, p_value_adjusted)
# Rename performance measures using a named vector
rename_map <- c(
'NumberLetter_BIS_Repeat' = "Number-Letter: Repeat",
'NumberLetter_BIS_Switch' = "Number-Letter: Switch",
'NumberLetter_BIS_Diff_Score' = "Number-Letter: Switch - Repeat",
'Stroop_BIS_Congruent' = "Stroop: Congruent",
'Stroop_BIS_Incongruent' = "Stroop: Incongruent",
'Stroop_BIS_Diff_Score' = "Stroop: Incongruent - Congruent",
'TwoBack_BIS_Foil' = "2-Back: Foil",
'TwoBack_BIS_Target' = "2-Back: Target",
'TwoBack_BIS_Total' = "2-Back: Total",
'SSRT' = "Stop-Signal RT")
t_test_table_pub$performance_measures <- rename_map[t_test_table_pub$performance_measures]
# Change colnames
colnames(t_test_table_pub) <- c("Performance Measure", "Responder Mean (SD)", "Non-Responder Mean (SD)", "df", "t-Statistic", "Hedges' g","p-Value", "adj. p-Value")
ft_t_test <- flextable(t_test_table_pub)
# Set table properties
ft_t_test <- set_table_properties(ft_t_test, width = 1, layout = "autofit")
# Header in bold
ft_t_test <- bold(ft_t_test, bold = TRUE, part = "header")
# Alignments
ft_t_test <- align(ft_t_test, j = 1, align = "left", part = "all") # first column
ft_t_test <- align(ft_t_test, j = 2:ncol(t_test_table_pub), align = "center", part = "all") # rest
# Export flextable
save_as_docx(
ft_t_test,
path = file.path(results_path, "t-test_Responder_Nonresponder.docx"),
pr_section = format_flextable_portrait)
# Reshape data from wide to long format, including SSRT, for Response vs. Nonresponse
Response_vs_NonResponse_long <- data_Pat_pre %>%
pivot_longer(cols = all_of(imp_columns), # imp_columns now includes SSRT
names_to = "Condition",
values_to = "BIS_Score") %>%
drop_na()
# Add a new task variable for faceting
Response_vs_NonResponse_long <- Response_vs_NonResponse_long %>%
mutate(Task = case_when(
grepl("NumberLetter", Condition) ~ "Number-Letter Task",
grepl("Stroop", Condition) ~ "Stroop Task",
grepl("TwoBack", Condition) ~ "2-Back Task",
Condition == "SSRT" ~ "Stop Signal Task"
))
# Remove prefixes from Condition labels, keeping Task intact
Response_vs_NonResponse_long <- Response_vs_NonResponse_long %>%
mutate(Condition = gsub("NumberLetter_BIS_|Stroop_BIS_|TwoBack_BIS_", "", Condition)) %>%
mutate(Condition = as.character(Condition)) %>%
# Set the condition order for each task separately to avoid conflicts (cannot both be "Diff_Score")
mutate(Condition = ifelse(Task == "NumberLetter" & Condition == "Diff_Score", "Diff_Score NL", Condition)) %>%
mutate(Condition = ifelse(Task == "Stroop" & Condition == "Diff_Score", "Diff_Score Stroop", Condition)) %>%
# Convert Condition to factor with ordering
mutate(Condition = case_when(
Task == "NumberLetter" ~ factor(Condition, levels = c("Repeat", "Switch", "Diff_Score NL")),
Task == "Stroop" ~ factor(Condition, levels = c("Congruent", "Incongruent", "Diff_Score Stroop")),
Task == "TwoBack" ~ factor(Condition, levels = c("Target", "Foil", "Total")),
TRUE ~ as.factor(Condition)
))
# Convert "Response" to factor
Response_vs_NonResponse_long$Response <- factor(Response_vs_NonResponse_long$Response, levels = c(0, 1), labels = c("Nonresponders", "Responders"))
# Create violin plots with mean and rename conditions in the plot
violin_plots_response_vs_nonresponse <- ggplot(Response_vs_NonResponse_long, aes(x = Condition, y = BIS_Score, fill = Response)) +
geom_violin(position = position_dodge(width = 0.8)) +
stat_summary(fun.data = mean_sdl, geom = "pointrange", # mult = 2 (SD) by default
position = position_dodge(width = 0.8)) + # width = 0.65, fatten = 2
facet_wrap(~ Task, scales = "free") +
labs(x = "",
y = "Performance Score",
fill = "Group") +
scale_x_discrete(labels = function(x) {
x[x == "Diff_Score"] <- "Difference \nScore"
x[x == "Diff_Score Stroop"] <- "Difference \nScore"
x[x == "Total"] <- "Difference \nScore"
return(x)
}) +
scale_fill_manual(values = c("Nonresponders" = "#D3D3D3", #colors
"Responders" = "#48CFCB")) +
theme_bw() +
theme(
text = element_text(family = "Arial"), #Font
axis.title = element_text(size = 24),
axis.title.y = element_text(size = 24, margin = margin(r = 30)),
axis.text = element_text(size = 18),
legend.title = element_text(size = 24),
legend.text = element_text(size = 18),
strip.text = element_text(size = 20),
panel.spacing.x = unit(3, "lines")
)
print(violin_plots_response_vs_nonresponse)
ggsave(file.path(results_path,"violin_plots_response_nonresponse.png"),
plot = violin_plots_response_vs_nonresponse, width = 16, height = 9, dpi = 300)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
windowsFonts(Arial=windowsFont("Arial"))
library(readr)
library(dplyr)
library(ggplot2)
family = "Arial"
theme_set(theme_bw() + theme(text = element_text(family = family),
axis.title = element_text(size = 24),
axis.title.y = element_text(size = 24, margin = margin(r = 30)),
axis.text = element_text(size = 18),
#legend.text = element_text(size = 18),
strip.text = element_text(size = 20)
#plot.title = element_text(size = size_text, family = family)
#panel.spacing.x = unit(3, "lines")
))
# or theme_classic()
# Get all folders in the results folder (each containing the results of another model)
basic_path = "Y:\\Psythera"
path_results_folder = file.path(basic_path, "Projekte_Meinke\\Old_projects\\Labrotation_Rebecca\\2_Machine_learning\\Results\\RT_trimmed_RT_wrong_removed_outliers-removed")
results_folders <- list.files(path = path_results_folder, full.names = FALSE)
# Filter for new results
results_folders <- results_folders[grepl("new5", results_folders)& !grepl("permuted", results_folders)]
# For each folder, save the performance_across_iters-file in dictionary
results_dict = list()
for (folder_name in results_folders) {
# Read the file and store it as a dictionary
results_dict[[folder_name]] <- read.delim(file.path(path_results_folder, folder_name,
"performance_across_iters.txt"))
}
# Combine results
combined_results <- bind_rows(results_dict, .id = "FolderName")
combined_results$X <- NULL
# Separate into regressor and classifier dataframes
classification_results <- combined_results[grepl("classifier", combined_results$FolderName), ]
regression_results <- combined_results[grepl("regressor", combined_results$FolderName), ]
create_classification_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_classifier_yes_smote_oversampling", results_df$FolderName),
"Random Forest\n(OS: SMOTE)",
ifelse(grepl("random_forest_classifier_yes_simple", results_df$FolderName),
"Random Forest\n(OS: Simple)",
ifelse(grepl("random_forest_classifier_no_oversampling", results_df$FolderName),
"Random Forest\n(OS: no)",
ifelse(grepl("svm_classifier_yes_smote", results_df$FolderName),
"Rbf-SVM\n(OS: SMOTE)",
ifelse(grepl("svm_classifier_yes_simple", results_df$FolderName),
"Rbf-SVM\n(OS: Simple)",
ifelse(grepl("svm_classifier_no_oversampling", results_df$FolderName),
"Rbf-SVM\n(OS: no)", NA))))))
# Ensure correct ordering
results_df$Model <- factor(results_df$Model, levels = c("Random Forest\n(OS: SMOTE)","Random Forest\n(OS: Simple)","Random Forest\n(OS: no)","Rbf-SVM\n(OS: SMOTE)",
"Rbf-SVM\n(OS: Simple)","Rbf-SVM\n(OS: no)"))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=balanced_accuracy, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Balanced Accuracy",  x = "", fill = "Feature Set") +
scale_y_continuous(breaks = c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
geom_rect(data = subset(results_df, Model == "Random Forest\n(OS: SMOTE)"),
fill = NA, colour = "black", size = 1.5, xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf) +
facet_wrap(~Model, nrow = 1)
return(plot)
}
classification_plot <- create_classification_plot(results_df = classification_results)
create_regression_plot <- function(results_df){
# Create new model variable
results_df$Model <- ifelse(grepl("random_forest_regressor", results_df$FolderName), "Random Forest",
ifelse(grepl("ridge_regressor", results_df$FolderName), "Ridge", NA))
# Define feature sets and specify colors
results_df$FeatureSet <- ifelse(grepl("clinical_features", results_df$FolderName),
"Clinical Features", "Clinical + Executive\nFunctioning Features")
colors <- c("Clinical Features" = "white", "Clinical + Executive\nFunctioning Features" = "#D3D3D3")
# Set factor levels for FeatureSet to control order in the plot
results_df$FeatureSet <- factor(results_df$FeatureSet, levels = c("Clinical Features", "Clinical + Executive\nFunctioning Features"))
# Create ggplot
plot <- ggplot(results_df, aes(x=FeatureSet, y=MSE, fill=FeatureSet)) +
geom_violin(scale = "width") +
geom_jitter(size = 1, width = 0.2, height = 0) +
stat_summary(
geom = "point",
shape = 24,
fun = "mean",
col = "black",
fill = "red",
size = 3
) +
labs(y = "Mean Squared Error",  x = "", fill = "Feature Set") +
scale_fill_manual(values = colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") +
facet_wrap(~Model, nrow = 1)
return(plot)
}
regression_plot <- create_regression_plot(results_df = regression_results)
plots_path = file.path(basic_path, "Projekte_Meinke/Old_projects/Labrotation_Rebecca/2_Machine_learning/Plots/")
ggsave(file.path(plots_path,"Classification_results_plot.png"), plot = classification_plot, width = 16, height = 9, dpi = 300)
ggsave(file.path(plots_path, "Regression_results_plot.png"), plot = regression_plot, width = 16, height = 9, dpi = 300)

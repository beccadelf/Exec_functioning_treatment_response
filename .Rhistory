########################################
preprocess_RT_PC <- function(task, subjects){
# Initialize empty list to store preprocessed data
AllData_list <- list()
# Loop across all participants
for (subject in subjects) {
# Import data
data <- df_from_matlab(task_name = task, subject = subject)
# Bring data NumberLetter and data Stroop to same format
if (task == "NumberLetter"){
colnames(data) <- sub(" ", "_", colnames(data))
data <- data %>%
rename("Condition"="Task_transition")
} else if (task == "Stroop"){
data <- data %>%
rename("Accuracy"="Fehler")
}
# Basic preprocessing
data_red <- data %>%
# Select relevant columns
select(Condition, Response, Accuracy, RT) %>%
# Discard first trial (only applies to NumbLet)
filter(Condition != "NoPreviousTrial")
# Convert RTs & Accuracy to numeric
data_red$RT <- as.numeric(data_red$RT)
data_red$Accuracy <- as.numeric(data_red$Accuracy)
# STEP 1.1.: Processing data for RT analysis
data_RT_clean <- data_red %>%
## Step 1: Change RT to ms
mutate(RT = RT * 1000) %>%
## Step 2: Remove outlier
filter(RT > 150)
# STEP 1.2.: Compute mean RT overall and per condition
overall_RT_mean <- mean(data_RT_clean$RT)
RT_means <- data_RT_clean %>%
group_by(Condition) %>%
summarize_at(vars(RT), mean)
## Transform data from LONG to WIDE format
wideData_RT <- RT_means %>%
pivot_wider(names_from = Condition, values_from = RT)
# STEP 2: Compute proportion correct overall and per condition
overall_PC <- mean(data_red$Accuracy)
PC <- data_red %>%
group_by(Condition) %>%
summarize_at(vars(Accuracy), mean)
## TODO: Convert to percentages?
## Transform data from LONG to WIDE format
wideData_PC <- PC %>%
pivot_wider(names_from = Condition, values_from = Accuracy)
# STEP 3: Merging the two wide dataframe
## Update column names to include the variable identity
colnames(wideData_RT) <- paste(colnames(wideData_RT),"RT", sep="_")
colnames(wideData_PC) <- paste(colnames(wideData_PC),"PC", sep="_")
## Merge dataframes
wideData_merged <- cbind(wideData_RT, wideData_PC)
# STEP 4: Adding extra relevant info
## Add subject ID, overall mean RT and overall PC
wideData_merged$Subject <- subject
wideData_merged$Overall_RT <- overall_RT_mean
wideData_merged$Overall_PC <- overall_PC
## Store the current processed data into holder list
AllData_list[[subject]] <- wideData_merged
}
# Bind all rows together
AllData <- bind_rows(all_data_list)
return(AllData)
}
data_all_red <- data_all %>%
rename(Subject = id) %>%
select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score)
library(tidyverse)
data_all_red <- data_all %>%
rename(Subject = id) %>%
select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score)
basic_path = "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/Task_battery/Task_battery"
# Load data
data_all <- read_dta('Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/CRC_C5_Hilbert/CRC_C5_Hilbert/Data_Kevin_28.07.23.dta')
library(haven)
basic_path = "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/Task_battery/Task_battery"
# Load data
data_all <- read_dta('Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/CRC_C5_Hilbert/CRC_C5_Hilbert/Data_Kevin_28.07.23.dta')
data_tasks_old <- read_dta('Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/CRC_C5_Hilbert/CRC_C5_Hilbert/TaskBattery.dta')
data_all_red <- data_all %>%
rename(Subject = id) %>%
select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score)
# Rename stid for later merge
data_tasks_old <- data_tasks_old %>%
rename(Subject = stid)
files <- list.files(basic_path)
sub_first <- gsub("SFB_C5_","",files)
sub_IDs <- sapply(strsplit(sub_first, "_"), function(x) x[1])
subjects <- unique(sub_IDs)
# Delete alt and "" from subjects
subjects <- subjects[subjects != "alt"]
subjects <- subjects[subjects != ""]
#subjects = subjects[3:4]
all_TwoBack <- combine_df_across_subj(task = "TwoBack")
library(rmatio)
#subjects = subjects[3:4]
all_TwoBack <- combine_df_across_subj(task = "TwoBack")
library(data.table)
#subjects = subjects[3:4]
all_TwoBack <- combine_df_across_subj(task = "TwoBack")
combine_df_across_subj <- function(task){
# Initialize an empty list to hold each subject's data
all_subjects_data <- list()
for (subject in subjects){
try({
df <- df_from_matlab(task, subject)
df$subject <- subject
all_subjects_data[[subject]] <- df
})
}
# Combine all subjects' data into a single dataframe
df_all_subj <- bind_rows(all_subjects_data)
return(df_all_subj)
}
#subjects = subjects[3:4]
all_TwoBack <- combine_df_across_subj(task = "TwoBack")
all_Stroop <- combine_df_across_subj(task = "Stroop")
all_StopSignal <-  combine_df_across_subj(task = "StopSignal")
View(all_TwoBack)
all_NumberLetter <- combine_df_across_subj(task = "NumberLetter")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,rows.print = 6, cols.min.print = 3)
library(tidyverse)
library(haven)
library(rmatio)
library(data.table)
########################################
## Function 1: get relevant data from mat-file for a single subject
########################################
df_from_matlab <- function(task_name, subject){
file_name = paste("SFB_C5_",subject,"_",task_name,".mat", sep = "")
data_path = file.path(basic_path,file_name)
data <- read.mat(data_path)
# So far, we only need TrialList_Log_ -> it is the combination of TL_ und LogMat
subtask = paste("TrialList_Log_",task_name,sep = "")
task_df <- as.data.frame(rbindlist(data[[subtask]]))
header <- paste(subtask, "Header", sep = "_")
colnames(task_df) <- c(rbindlist(data[[header]])[1,])
return(task_df)
}
########################################
## Function 2: preprocessing of RT and PC
########################################
preprocess_RT_PC <- function(task, subjects){
# Initialize empty list to store preprocessed data
AllData_list <- list()
# Loop across all participants
for (subject in subjects) {
# Import data
data <- df_from_matlab(task_name = task, subject = subject)
# Bring data NumberLetter and data Stroop to same format
if (task == "NumberLetter"){
colnames(data) <- sub(" ", "_", colnames(data))
data <- data %>%
rename("Condition"="Task_transition")
} else if (task == "Stroop"){
data <- data %>%
rename("Accuracy"="Fehler")
}
# Basic preprocessing
data_red <- data %>%
# Select relevant columns
select(Condition, Response, Accuracy, RT) %>%
# Discard first trial (only applies to NumbLet)
filter(Condition != "NoPreviousTrial")
# Convert RTs & Accuracy to numeric
data_red$RT <- as.numeric(data_red$RT)
data_red$Accuracy <- as.numeric(data_red$Accuracy)
# STEP 1.1.: Processing data for RT analysis
data_RT_clean <- data_red %>%
## Step 1: Change RT to ms
mutate(RT = RT * 1000) %>%
## Step 2: Remove outlier
filter(RT > 150)
# STEP 1.2.: Compute mean RT overall and per condition
overall_RT_mean <- mean(data_RT_clean$RT)
RT_means <- data_RT_clean %>%
group_by(Condition) %>%
summarize_at(vars(RT), mean)
## Transform data from LONG to WIDE format
wideData_RT <- RT_means %>%
pivot_wider(names_from = Condition, values_from = RT)
# STEP 2: Compute proportion correct overall and per condition
overall_PC <- mean(data_red$Accuracy)
PC <- data_red %>%
group_by(Condition) %>%
summarize_at(vars(Accuracy), mean)
## TODO: Convert to percentages?
## Transform data from LONG to WIDE format
wideData_PC <- PC %>%
pivot_wider(names_from = Condition, values_from = Accuracy)
# STEP 3: Merging the two wide dataframe
## Update column names to include the variable identity
colnames(wideData_RT) <- paste(colnames(wideData_RT),"RT", sep="_")
colnames(wideData_PC) <- paste(colnames(wideData_PC),"PC", sep="_")
## Merge dataframes
wideData_merged <- cbind(wideData_RT, wideData_PC)
# STEP 4: Adding extra relevant info
## Add subject ID, overall mean RT and overall PC
wideData_merged$Subject <- subject
wideData_merged$Overall_RT <- overall_RT_mean
wideData_merged$Overall_PC <- overall_PC
## Store the current processed data into holder list
AllData_list[[subject]] <- wideData_merged
}
# Bind all rows together
AllData <- bind_rows(all_data_list)
return(AllData)
}
basic_path = "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/Task_battery/Task_battery"
# Load data
data_all <- read_dta('Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/CRC_C5_Hilbert/CRC_C5_Hilbert/Data_Kevin_28.07.23.dta')
data_tasks_old <- read_dta('Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/CRC_C5_Hilbert/CRC_C5_Hilbert/TaskBattery.dta')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,rows.print = 6, cols.min.print = 3)
library(tidyverse)
library(haven)
library(rmatio)
library(data.table)
########################################
## Function 1: get relevant data from mat-file for a single subject
########################################
df_from_matlab <- function(task_name, subject){
file_name = paste("SFB_C5_",subject,"_",task_name,".mat", sep = "")
data_path = file.path(basic_path,file_name)
data <- read.mat(data_path)
# So far, we only need TrialList_Log_ -> it is the combination of TL_ und LogMat
subtask = paste("TrialList_Log_",task_name,sep = "")
task_df <- as.data.frame(rbindlist(data[[subtask]]))
header <- paste(subtask, "Header", sep = "_")
colnames(task_df) <- c(rbindlist(data[[header]])[1,])
return(task_df)
}
########################################
## Function 2: preprocessing of RT and PC
########################################
preprocess_RT_PC <- function(task, subjects){
# Initialize empty list to store preprocessed data
AllData_list <- list()
# Loop across all participants
for (subject in subjects) {
# Import data
data <- df_from_matlab(task_name = task, subject = subject)
# Bring data NumberLetter and data Stroop to same format
if (task == "NumberLetter"){
colnames(data) <- sub(" ", "_", colnames(data))
data <- data %>%
rename("Condition"="Task_transition")
} else if (task == "Stroop"){
data <- data %>%
rename("Accuracy"="Fehler")
}
# Basic preprocessing
data_red <- data %>%
# Select relevant columns
select(Condition, Response, Accuracy, RT) %>%
# Discard first trial (only applies to NumbLet)
filter(Condition != "NoPreviousTrial")
# Convert RTs & Accuracy to numeric
data_red$RT <- as.numeric(data_red$RT)
data_red$Accuracy <- as.numeric(data_red$Accuracy)
# STEP 1.1.: Processing data for RT analysis
data_RT_clean <- data_red %>%
## Step 1: Change RT to ms
mutate(RT = RT * 1000) %>%
## Step 2: Remove outlier
filter(RT > 150)
# STEP 1.2.: Compute mean RT overall and per condition
overall_RT_mean <- mean(data_RT_clean$RT)
RT_means <- data_RT_clean %>%
group_by(Condition) %>%
summarize_at(vars(RT), mean)
## Transform data from LONG to WIDE format
wideData_RT <- RT_means %>%
pivot_wider(names_from = Condition, values_from = RT)
# STEP 2: Compute proportion correct overall and per condition
overall_PC <- mean(data_red$Accuracy)
PC <- data_red %>%
group_by(Condition) %>%
summarize_at(vars(Accuracy), mean)
## TODO: Convert to percentages?
## Transform data from LONG to WIDE format
wideData_PC <- PC %>%
pivot_wider(names_from = Condition, values_from = Accuracy)
# STEP 3: Merging the two wide dataframe
## Update column names to include the variable identity
colnames(wideData_RT) <- paste(colnames(wideData_RT),"RT", sep="_")
colnames(wideData_PC) <- paste(colnames(wideData_PC),"PC", sep="_")
## Merge dataframes
wideData_merged <- cbind(wideData_RT, wideData_PC)
# STEP 4: Adding extra relevant info
## Add subject ID, overall mean RT and overall PC
wideData_merged$Subject <- subject
wideData_merged$Overall_RT <- overall_RT_mean
wideData_merged$Overall_PC <- overall_PC
## Store the current processed data into holder list
AllData_list[[subject]] <- wideData_merged
}
# Bind all rows together
AllData <- bind_rows(all_data_list)
return(AllData)
}
files <- list.files(basic_path)
basic_path = "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/Task_battery/Task_battery"
files <- list.files(basic_path)
sub_first <- gsub("SFB_C5_","",files)
sub_IDs <- sapply(strsplit(sub_first, "_"), function(x) x[1])
subjects <- unique(sub_IDs)
# Delete alt and "" from subjects
subjects <- subjects[subjects != "alt"]
subjects <- subjects[subjects != ""]
AllData_NumbLet <- preprocess_RT_PC(task = "NumberLetter", subjects = subjects)
########################################
## Function 1: get relevant data from mat-file for a single subject
########################################
df_from_matlab <- function(task_name, subject){
file_name = paste("SFB_C5_",subject,"_",task_name,".mat", sep = "")
data_path = file.path(basic_path,file_name)
data <- read.mat(data_path)
# So far, we only need TrialList_Log_ -> it is the combination of TL_ und LogMat
subtask = paste("TrialList_Log_",task_name,sep = "")
task_df <- as.data.frame(rbindlist(data[[subtask]]))
header <- paste(subtask, "Header", sep = "_")
colnames(task_df) <- c(rbindlist(data[[header]])[1,])
return(task_df)
}
########################################
## Function 2: preprocessing of RT and PC
########################################
preprocess_RT_PC <- function(task, subjects){
# Initialize empty list to store preprocessed data
all_data_list <- list()
# Loop across all participants
for (subject in subjects) {
# Import data
data <- df_from_matlab(task_name = task, subject = subject)
# Bring data NumberLetter and data Stroop to same format
if (task == "NumberLetter"){
colnames(data) <- sub(" ", "_", colnames(data))
data <- data %>%
rename("Condition"="Task_transition")
} else if (task == "Stroop"){
data <- data %>%
rename("Accuracy"="Fehler")
}
# Basic preprocessing
data_red <- data %>%
# Select relevant columns
select(Condition, Response, Accuracy, RT) %>%
# Discard first trial (only applies to NumbLet)
filter(Condition != "NoPreviousTrial")
# Convert RTs & Accuracy to numeric
data_red$RT <- as.numeric(data_red$RT)
data_red$Accuracy <- as.numeric(data_red$Accuracy)
# STEP 1.1.: Processing data for RT analysis
data_RT_clean <- data_red %>%
## Step 1: Change RT to ms
mutate(RT = RT * 1000) %>%
## Step 2: Remove outlier
filter(RT > 150)
# STEP 1.2.: Compute mean RT overall and per condition
overall_RT_mean <- mean(data_RT_clean$RT)
RT_means <- data_RT_clean %>%
group_by(Condition) %>%
summarize_at(vars(RT), mean)
## Transform data from LONG to WIDE format
wideData_RT <- RT_means %>%
pivot_wider(names_from = Condition, values_from = RT)
# STEP 2: Compute proportion correct overall and per condition
overall_PC <- mean(data_red$Accuracy)
PC <- data_red %>%
group_by(Condition) %>%
summarize_at(vars(Accuracy), mean)
## TODO: Convert to percentages?
## Transform data from LONG to WIDE format
wideData_PC <- PC %>%
pivot_wider(names_from = Condition, values_from = Accuracy)
# STEP 3: Merging the two wide dataframe
## Update column names to include the variable identity
colnames(wideData_RT) <- paste(colnames(wideData_RT),"RT", sep="_")
colnames(wideData_PC) <- paste(colnames(wideData_PC),"PC", sep="_")
## Merge dataframes
wideData_merged <- cbind(wideData_RT, wideData_PC)
# STEP 4: Adding extra relevant info
## Add subject ID, overall mean RT and overall PC
wideData_merged$Subject <- subject
wideData_merged$Overall_RT <- overall_RT_mean
wideData_merged$Overall_PC <- overall_PC
## Store the current processed data into holder list
all_data_list[[subject]] <- wideData_merged
}
# Bind all rows together
AllData <- bind_rows(all_data_list)
return(AllData)
}
AllData_NumbLet <- preprocess_RT_PC(task = "NumberLetter", subjects = subjects)
AllData_NumbLet <- preprocess_RT_PC(task = "NumberLetter", subjects = subjects)
AllData_Stroop <- preprocess_RT_PC(task = "Stroop", subjects = subjects)
AllData_TwoBack <- preprocess_RT_PC(task = "TwoBack", subjects = subjects)
View(AllData_NumbLet)
# Initialize empty holder list
AllData_SST <- data.frame()
for (subject in subjects) {
data_SST <- df_from_matlab(task_name = "StopSignal", subject = subject)
# Reduce to only relevant variables
data_SST_red <- data_SST %>%
select(Condition, RT, Accuracy, `Stop-signal delay`)
# Recode condition: Go -> 0, Stop -> 1
data_SST_red$Condition <- ifelse(data_SST_red$Condition == "Go", 0, 1)
# Convert all columns to numeric
data_SST_red[] <- lapply(data_SST_red, as.numeric)
# Calculate SSRT
SSRT_value <- integration_adaptiveSSD(data_SST_red, stop_col = "Condition", rt_col = "RT",
acc_col = "Accuracy", ssd_col = "Stop-signal delay")
# Append the result to holder dataframe
AllData_SST <- rbind(AllData_SST, data.frame(Subject = subject, SSRT = SSRT_value))
}
library(SSRTcalc)
# Initialize empty holder list
AllData_SST <- data.frame()
for (subject in subjects) {
data_SST <- df_from_matlab(task_name = "StopSignal", subject = subject)
# Reduce to only relevant variables
data_SST_red <- data_SST %>%
select(Condition, RT, Accuracy, `Stop-signal delay`)
# Recode condition: Go -> 0, Stop -> 1
data_SST_red$Condition <- ifelse(data_SST_red$Condition == "Go", 0, 1)
# Convert all columns to numeric
data_SST_red[] <- lapply(data_SST_red, as.numeric)
# Calculate SSRT
SSRT_value <- integration_adaptiveSSD(data_SST_red, stop_col = "Condition", rt_col = "RT",
acc_col = "Accuracy", ssd_col = "Stop-signal delay")
# Append the result to holder dataframe
AllData_SST <- rbind(AllData_SST, data.frame(Subject = subject, SSRT = SSRT_value))
}
write.csv(AllData_NumbLet, "Z:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Task_Data/AllData_NumbLet.csv")
write.csv(AllData_NumbLet, "Z:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Task_Data/AllData_NumbLet.csv")
file_path <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Task_Data/"
write.csv(AllData_NumbLet, paste0(file_path, "AllData_NumbLet.csv"), row.names = FALSE)
write.csv(AllData_Stroop, paste0(file_path, "AllData_Stroop.csv"), row.names = FALSE)
write.csv(AllData_TwoBack, paste0(file_path, "AllData_TwoBack.csv"), row.names = FALSE)
write.csv(AllData_SST, paste0(file_path, "AllData_SST.csv"), row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, rows.print = 6, cols.min.print = 3)
library(haven)
# library(rmatio)
# library(DescTools)
# library(data.table)
# library(tidyverse)
# library(caret)
# library(SSRTcalc)
# library(ggplot2)
basic_path_taskdata <- "Z:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Task_Data"
AllData_NumbLet <- read.csv(file.path(basic_path_taskdata,"AllData_NumbLet.csv"))
basic_path_taskdata <- "Z:/PsyThera/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Task_Data"
AllData_NumbLet <- read.csv(file.path(basic_path_taskdata,"AllData_NumbLet.csv"))
basic_path_taskdata <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Daten_Gruppenvergleich/With_wrong_responses/Task_Data"
AllData_NumbLet <- read.csv(file.path(basic_path_taskdata,"AllData_NumbLet.csv"))
AllData_Stroop <- read.csv(file.path(basic_path_taskdata,"AllData_Stroop.csv"))
AllData_TwoBack <- read.csv(file.path(basic_path_taskdata,"AllData_TwoBack.csv"))
AllData_SST <- read.csv(file.path(basic_path_taskdata,"AllData_SST.csv"))
View(AllData_NumbLet)
basic_path_socdemdata <- "Z:/Projekte_Meinke/Old_projects/Labrotation_Rebecca/Rohdaten/CRC_C5_Hilbert/CRC_C5_Hilbert"
# Demographics & clinical data
data_all <- haven::read_dta(file.path(basic_path_socdemdata, 'Data_Kevin_28.07.23.dta'))
# Old task data
data_tasks_old <- haven::read_dta(file.path(basic_path_socdemdata, 'TaskBattery.dta'))
class(AllData_NumbLet$Subject)
class(AllData_SST$Subject)
class(AllData_Stroop$Subject)
class(AllData_TwoBack$Subject)
class(data_all$id)
data_all_red <- data_all %>%
rename(Subject = id) %>%
select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score)
library(tidyverse)
data_all_red <- data_all %>%
rename(Subject = id) %>%
select(Subject, Gruppe, T1_BAT_FAS_score, T3_BAT_FAS_score)
# Rename stid for later merge
data_tasks_old <- data_tasks_old %>%
rename(Subject = stid)
class(data_all_red$Subject)
# Align data types
#data_all_red$Subject <- as.character(data_all_red$Subject)
merged_data <- AllData_NumbLet %>%
# 1. Merge all task dataframes
left_join(AllData_Stroop, by = "Subject") %>%
left_join(AllData_TwoBack, by = "Subject") %>%
left_join(AllData_SST, by = "Subject") %>%
# 2. Add data_all_red
left_join(data_all_red, by = "Subject")
# Change variable names
merged_data <- merged_data %>%
rename(NumbLet_Average_RT = Overall_RT.x,
NumbLet_Average_PC = Overall_PC.x,
Stroop_Average_RT = Overall_RT.y,
Stroop_Average_PC = Overall_PC.y,
TwoBack_Average_RT = Overall_RT,
TwoBack_Average_PC = Overall_PC)
# Assign post IDs (Gruppe = 2)
merged_data <- merged_data %>%
mutate(Subject = as.numeric(Subject),
Gruppe = ifelse(Subject >= 216601 & Subject <= 216760, 2, Gruppe))
# 1. Remove subjects with missing group information
merged_data_excl1 <- merged_data %>%
filter(!is.na(Gruppe))
excl_group <- anti_join(merged_data, merged_data_excl1, by = "Subject")
# 2. Remove patients with missing FAS_T1 and/or FAS_T3
merged_data_clean <- merged_data_excl1 %>%
filter(Gruppe == 0 | Gruppe == 2 | (Gruppe == 1 & !is.na(T1_BAT_FAS_score) & !is.na(T3_BAT_FAS_score)))
excl_criterion <- anti_join(merged_data_excl1, merged_data_clean, by = "Subject")
